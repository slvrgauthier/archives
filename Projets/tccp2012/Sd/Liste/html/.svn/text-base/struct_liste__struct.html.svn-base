<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Liste doublement chainée: Référence de la structure Liste_struct</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Liste doublement chainée
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Généré par Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Recherche');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Page&#160;principale</span></a></li>
      <li class="current"><a href="annotated.html"><span>Structures&#160;de&#160;données</span></a></li>
      <li><a href="files.html"><span>Fichiers</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Recherche" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.html"><span>Structures&#160;de&#160;données</span></a></li>
      <li><a href="classes.html"><span>Index&#160;des&#160;structures&#160;de&#160;données</span></a></li>
      <li><a href="functions.html"><span>Champs&#160;de&#160;donnée</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>Tout</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Structures de données</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Fichiers</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Fonctions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Définitions de type</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Macros</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-attribs">Champs de données</a>  </div>
  <div class="headertitle">
<div class="title">Référence de la structure Liste_struct</div>  </div>
</div><!--header-->
<div class="contents">

<p>la structure Liste est une collection de cellule.  
 <a href="struct_liste__struct.html#details">Plus de détails...</a></p>

<p><code>#include &lt;<a class="el" href="liste_8h_source.html">liste.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Champs de données</h2></td></tr>
<tr class="memitem:a95d092b84f52d1a9dc3d77c96ea7c671"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a95d092b84f52d1a9dc3d77c96ea7c671"></a>
<a class="el" href="liste_8h.html#a15ddea793abf8d86dcbdc7772979cc00">Cellule</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_liste__struct.html#a95d092b84f52d1a9dc3d77c96ea7c671">entry</a></td></tr>
<tr class="memdesc:a95d092b84f52d1a9dc3d77c96ea7c671"><td class="mdescLeft">&#160;</td><td class="mdescRight">Point d'entrée dans la suite des Cellules. <br/></td></tr>
<tr class="separator:a95d092b84f52d1a9dc3d77c96ea7c671"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a439227feff9d7f55384e8780cfc2eb82"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a439227feff9d7f55384e8780cfc2eb82"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_liste__struct.html#a439227feff9d7f55384e8780cfc2eb82">size</a></td></tr>
<tr class="memdesc:a439227feff9d7f55384e8780cfc2eb82"><td class="mdescLeft">&#160;</td><td class="mdescRight">Mémorise la taille ( nombre de cellules) de la liste. <br/></td></tr>
<tr class="separator:a439227feff9d7f55384e8780cfc2eb82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e4215e27cac56c19db1a0429e8d3323"><td class="memItemLeft" align="right" valign="top"><a class="el" href="liste_8h.html#a15ddea793abf8d86dcbdc7772979cc00">Cellule</a>(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_liste__struct.html#a1e4215e27cac56c19db1a0429e8d3323">a</a> )(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l, int index)</td></tr>
<tr class="memdesc:a1e4215e27cac56c19db1a0429e8d3323"><td class="mdescLeft">&#160;</td><td class="mdescRight">Renvoie l'element d'index correspondant.  <a href="#a1e4215e27cac56c19db1a0429e8d3323"></a><br/></td></tr>
<tr class="separator:a1e4215e27cac56c19db1a0429e8d3323"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1cebe0b3480a5fbf3bd541400afda150"><td class="memItemLeft" align="right" valign="top"><a class="el" href="liste_8h.html#a15ddea793abf8d86dcbdc7772979cc00">Cellule</a>(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_liste__struct.html#a1cebe0b3480a5fbf3bd541400afda150">premierElement</a> )(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l)</td></tr>
<tr class="memdesc:a1cebe0b3480a5fbf3bd541400afda150"><td class="mdescLeft">&#160;</td><td class="mdescRight">Renvoie le premier element.  <a href="#a1cebe0b3480a5fbf3bd541400afda150"></a><br/></td></tr>
<tr class="separator:a1cebe0b3480a5fbf3bd541400afda150"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0f50a667aefc89fe85d7838088e90da"><td class="memItemLeft" align="right" valign="top"><a class="el" href="liste_8h.html#a15ddea793abf8d86dcbdc7772979cc00">Cellule</a>(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_liste__struct.html#aa0f50a667aefc89fe85d7838088e90da">dernierElement</a> )(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l)</td></tr>
<tr class="memdesc:aa0f50a667aefc89fe85d7838088e90da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Renvoie le dernier element.  <a href="#aa0f50a667aefc89fe85d7838088e90da"></a><br/></td></tr>
<tr class="separator:aa0f50a667aefc89fe85d7838088e90da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b7e362ad19dc26e5244804b35b79e5d"><td class="memItemLeft" align="right" valign="top">int(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_liste__struct.html#a1b7e362ad19dc26e5244804b35b79e5d">egal</a> )(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l1, struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l2)</td></tr>
<tr class="memdesc:a1b7e362ad19dc26e5244804b35b79e5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Renvoie 1 si les deux listes sont égales sinon 0.  <a href="#a1b7e362ad19dc26e5244804b35b79e5d"></a><br/></td></tr>
<tr class="separator:a1b7e362ad19dc26e5244804b35b79e5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18441e4857345eb3757d893e73d71e17"><td class="memItemLeft" align="right" valign="top">int(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_liste__struct.html#a18441e4857345eb3757d893e73d71e17">insererDebut</a> )(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l, <a class="el" href="liste_8h.html#a15ddea793abf8d86dcbdc7772979cc00">Cellule</a> c)</td></tr>
<tr class="memdesc:a18441e4857345eb3757d893e73d71e17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Insère une cellule au début de la liste.  <a href="#a18441e4857345eb3757d893e73d71e17"></a><br/></td></tr>
<tr class="separator:a18441e4857345eb3757d893e73d71e17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf122e846aef2a759e4ed086575a2635"><td class="memItemLeft" align="right" valign="top">int(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_liste__struct.html#abf122e846aef2a759e4ed086575a2635">insererFin</a> )(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l, <a class="el" href="liste_8h.html#a15ddea793abf8d86dcbdc7772979cc00">Cellule</a> c)</td></tr>
<tr class="memdesc:abf122e846aef2a759e4ed086575a2635"><td class="mdescLeft">&#160;</td><td class="mdescRight">Insère une cellule à la fin de la liste.  <a href="#abf122e846aef2a759e4ed086575a2635"></a><br/></td></tr>
<tr class="separator:abf122e846aef2a759e4ed086575a2635"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a30362c92122550c6f8620f2e517560"><td class="memItemLeft" align="right" valign="top">int(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_liste__struct.html#a5a30362c92122550c6f8620f2e517560">insererAIndex</a> )(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l, <a class="el" href="liste_8h.html#a15ddea793abf8d86dcbdc7772979cc00">Cellule</a> c, int index)</td></tr>
<tr class="memdesc:a5a30362c92122550c6f8620f2e517560"><td class="mdescLeft">&#160;</td><td class="mdescRight">Insère une cellule à l'index fourni tel que l.insererAIndex(l,c,1) -&gt; l.a(l,1) == c.  <a href="#a5a30362c92122550c6f8620f2e517560"></a><br/></td></tr>
<tr class="separator:a5a30362c92122550c6f8620f2e517560"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfd3a36b0e295e0fd1d1576dd1f92c04"><td class="memItemLeft" align="right" valign="top">int(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_liste__struct.html#abfd3a36b0e295e0fd1d1576dd1f92c04">supprimerPremier</a> )(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l)</td></tr>
<tr class="memdesc:abfd3a36b0e295e0fd1d1576dd1f92c04"><td class="mdescLeft">&#160;</td><td class="mdescRight">Supprime la première cellule de la liste.  <a href="#abfd3a36b0e295e0fd1d1576dd1f92c04"></a><br/></td></tr>
<tr class="separator:abfd3a36b0e295e0fd1d1576dd1f92c04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7f22345aee12ddc2dac84af984ce476"><td class="memItemLeft" align="right" valign="top">int(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_liste__struct.html#ad7f22345aee12ddc2dac84af984ce476">supprimerDernier</a> )(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l)</td></tr>
<tr class="memdesc:ad7f22345aee12ddc2dac84af984ce476"><td class="mdescLeft">&#160;</td><td class="mdescRight">Supprime la dernière cellule de la liste.  <a href="#ad7f22345aee12ddc2dac84af984ce476"></a><br/></td></tr>
<tr class="separator:ad7f22345aee12ddc2dac84af984ce476"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c8a108fb838b2d6eb779e6c032e6135"><td class="memItemLeft" align="right" valign="top">int(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_liste__struct.html#a8c8a108fb838b2d6eb779e6c032e6135">supprimerAIndex</a> )(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l, int index)</td></tr>
<tr class="memdesc:a8c8a108fb838b2d6eb779e6c032e6135"><td class="mdescLeft">&#160;</td><td class="mdescRight">Supprime la cellule à l'index donné.  <a href="#a8c8a108fb838b2d6eb779e6c032e6135"></a><br/></td></tr>
<tr class="separator:a8c8a108fb838b2d6eb779e6c032e6135"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fc69b0fa9643ff704ebae832bc5b7f9"><td class="memItemLeft" align="right" valign="top">int(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_liste__struct.html#a1fc69b0fa9643ff704ebae832bc5b7f9">vider</a> )(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l)</td></tr>
<tr class="memdesc:a1fc69b0fa9643ff704ebae832bc5b7f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Vide la liste (Supprime tout les éléments).  <a href="#a1fc69b0fa9643ff704ebae832bc5b7f9"></a><br/></td></tr>
<tr class="separator:a1fc69b0fa9643ff704ebae832bc5b7f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88e108a13a94f7ceaa31aac47131282b"><td class="memItemLeft" align="right" valign="top">int(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_liste__struct.html#a88e108a13a94f7ceaa31aac47131282b">insererListeDebut</a> )(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l, struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *lAInserer)</td></tr>
<tr class="memdesc:a88e108a13a94f7ceaa31aac47131282b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Insère la deuxième liste dans la première au début (recopie de la deuxième dans la première).  <a href="#a88e108a13a94f7ceaa31aac47131282b"></a><br/></td></tr>
<tr class="separator:a88e108a13a94f7ceaa31aac47131282b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fc26dfaff4a3109c1786920de321c99"><td class="memItemLeft" align="right" valign="top">int(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_liste__struct.html#a3fc26dfaff4a3109c1786920de321c99">insererListeFin</a> )(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l, struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *lAInserer)</td></tr>
<tr class="memdesc:a3fc26dfaff4a3109c1786920de321c99"><td class="mdescLeft">&#160;</td><td class="mdescRight">Insère la deuxième liste dans la première à la fin (recopie de la deuxième dans la première).  <a href="#a3fc26dfaff4a3109c1786920de321c99"></a><br/></td></tr>
<tr class="separator:a3fc26dfaff4a3109c1786920de321c99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c729ab40823f33e35a27795983cc975"><td class="memItemLeft" align="right" valign="top">int(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_liste__struct.html#a1c729ab40823f33e35a27795983cc975">insererListeAIndex</a> )(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l, struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *lAInserer, int index)</td></tr>
<tr class="memdesc:a1c729ab40823f33e35a27795983cc975"><td class="mdescLeft">&#160;</td><td class="mdescRight">Insère la deuxième liste dans la première à l'index (recopie de la deuxième dans la première).  <a href="#a1c729ab40823f33e35a27795983cc975"></a><br/></td></tr>
<tr class="separator:a1c729ab40823f33e35a27795983cc975"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86119a3a032861a1c1cfbb1cd0b2c1e4"><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_liste__struct.html#a86119a3a032861a1c1cfbb1cd0b2c1e4">sousListe</a> )(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l, int index)</td></tr>
<tr class="memdesc:a86119a3a032861a1c1cfbb1cd0b2c1e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Renvoie la sous-liste, extrai à partir de l'index jusqu'à la fin de la liste.  <a href="#a86119a3a032861a1c1cfbb1cd0b2c1e4"></a><br/></td></tr>
<tr class="separator:a86119a3a032861a1c1cfbb1cd0b2c1e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22f1c4276d632b4587d07b11f00b7602"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a22f1c4276d632b4587d07b11f00b7602"></a>
<a class="el" href="structtype_associe.html">typeAssocie</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_liste__struct.html#a22f1c4276d632b4587d07b11f00b7602">ta</a></td></tr>
<tr class="memdesc:a22f1c4276d632b4587d07b11f00b7602"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type Associe à la liste. <br/></td></tr>
<tr class="separator:a22f1c4276d632b4587d07b11f00b7602"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e9559ce1b80aed4d75da4f26338f372"><td class="memItemLeft" align="right" valign="top">void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_liste__struct.html#a5e9559ce1b80aed4d75da4f26338f372">afficher</a> )(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l)</td></tr>
<tr class="memdesc:a5e9559ce1b80aed4d75da4f26338f372"><td class="mdescLeft">&#160;</td><td class="mdescRight">Affiche la liste grâce au fonction "afficher" de ta, si ta est null, il y'a appelle à afficher de la Cellule.  <a href="#a5e9559ce1b80aed4d75da4f26338f372"></a><br/></td></tr>
<tr class="separator:a5e9559ce1b80aed4d75da4f26338f372"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1923c053c634b7e7eb5a7a37948fbe77"><td class="memItemLeft" align="right" valign="top">int(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_liste__struct.html#a1923c053c634b7e7eb5a7a37948fbe77">trier</a> )(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l)</td></tr>
<tr class="memdesc:a1923c053c634b7e7eb5a7a37948fbe77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Trie une liste dans l'ordre croissant, il faut que le type associé soit non-null.  <a href="#a1923c053c634b7e7eb5a7a37948fbe77"></a><br/></td></tr>
<tr class="separator:a1923c053c634b7e7eb5a7a37948fbe77"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Description détaillée</h2>
<div class="textblock"><p>la structure Liste est une collection de cellule. </p>
<p>La liste est une structure permettant de représenter une liste doublement chainée.<br/>
 Un certain nombre de fonction ont été mise en oeuvre pour vous garantir une facilité d'utilisation :<br/>
</p>
<ul>
<li>Constructeur et destructeur.<br/>
</li>
<li>Recupération de cellule.<br/>
</li>
<li>Insertion de cellule/liste.<br/>
</li>
<li>Creation de sous-liste.<br/>
</li>
<li>Triage.<br/>
 Le code basique pour la creation d'une liste d'entier (int) sera :<br/>
 <div class="fragment"><div class="line"><span class="keywordtype">int</span> valeur = 5;</div>
<div class="line"><a class="code" href="struct_liste__struct.html" title="la structure Liste est une collection de cellule.">Liste</a> l = Liste_creer(NULL,associe_int); <span class="comment">// Creer une liste d&#39;entier vide</span></div>
<div class="line">Liste_insererDebut(l, Cellule_creer(&amp;valeur); <span class="comment">// Insertion de 5 dans la liste</span></div>
<div class="line">Liste_detruire(l); <span class="comment">// Libere la mémoire de l et de tout les elements qu&#39;elle comporte</span></div>
</div><!-- fragment --> </li>
</ul>
</div><h2 class="groupheader">Documentation des champs</h2>
<a class="anchor" id="a1e4215e27cac56c19db1a0429e8d3323"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="liste_8h.html#a15ddea793abf8d86dcbdc7772979cc00">Cellule</a>(* a)(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l, int index)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Renvoie l'element d'index correspondant. </p>
<dl class="section see"><dt>Voir également</dt><dd><a class="el" href="liste_8h.html#acfec16a811472f3d43b99902c6e5c2fb" title="Accès à une cellule avec une certaine position dans une liste.">Liste_a()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a5e9559ce1b80aed4d75da4f26338f372"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void(* afficher)(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Affiche la liste grâce au fonction "afficher" de ta, si ta est null, il y'a appelle à afficher de la Cellule. </p>
<dl class="section see"><dt>Voir également</dt><dd><a class="el" href="liste_8h.html#a69970245f36de6c3bcf0f79487c78473" title="Affiche le contedu d&#39;une liste.">Liste_afficher()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aa0f50a667aefc89fe85d7838088e90da"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="liste_8h.html#a15ddea793abf8d86dcbdc7772979cc00">Cellule</a>(* dernierElement)(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Renvoie le dernier element. </p>
<dl class="section see"><dt>Voir également</dt><dd><a class="el" href="liste_8h.html#ad1dde1058cf160a4f6b4c3568803251f" title="Accès au dernier élément de la liste.">Liste_dernierElement()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a1b7e362ad19dc26e5244804b35b79e5d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int(* egal)(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l1, struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l2)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Renvoie 1 si les deux listes sont égales sinon 0. </p>
<dl class="section see"><dt>Voir également</dt><dd><a class="el" href="liste_8h.html#af72954cbf6e8b18df334393735a78430" title="Teste l&#39;égalité deux listes.">Liste_egal()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a5a30362c92122550c6f8620f2e517560"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int(* insererAIndex)(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l, <a class="el" href="liste_8h.html#a15ddea793abf8d86dcbdc7772979cc00">Cellule</a> c, int index)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Insère une cellule à l'index fourni tel que l.insererAIndex(l,c,1) -&gt; l.a(l,1) == c. </p>
<dl class="section see"><dt>Voir également</dt><dd><a class="el" href="liste_8h.html#a859ee2fa88788512c10031c261da5b27" title="Insere une cellule dans une certaine place d&#39;une liste.">Liste_insererAIndex()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a18441e4857345eb3757d893e73d71e17"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int(* insererDebut)(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l, <a class="el" href="liste_8h.html#a15ddea793abf8d86dcbdc7772979cc00">Cellule</a> c)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Insère une cellule au début de la liste. </p>
<dl class="section see"><dt>Voir également</dt><dd><a class="el" href="liste_8h.html#a219a67eb53658b24275a8efff6e5aeae" title="Insere une cellule au début d&#39;une liste.">Liste_insererDebut()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="abf122e846aef2a759e4ed086575a2635"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int(* insererFin)(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l, <a class="el" href="liste_8h.html#a15ddea793abf8d86dcbdc7772979cc00">Cellule</a> c)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Insère une cellule à la fin de la liste. </p>
<dl class="section see"><dt>Voir également</dt><dd><a class="el" href="liste_8h.html#a303600b687ae885733ecb18ae3b5d9f0" title="Insere une cellule à la fin d&#39;une liste.">Liste_insererFin()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a1c729ab40823f33e35a27795983cc975"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int(* insererListeAIndex)(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l, struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *lAInserer, int index)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Insère la deuxième liste dans la première à l'index (recopie de la deuxième dans la première). </p>
<dl class="section see"><dt>Voir également</dt><dd><a class="el" href="liste_8h.html#a2b865b02c0bd46d2374fc806317f4722" title="Insere une liste dans d&#39;une autre liste à un index spécifié.">Liste_insererListeAIndex()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a88e108a13a94f7ceaa31aac47131282b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int(* insererListeDebut)(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l, struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *lAInserer)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Insère la deuxième liste dans la première au début (recopie de la deuxième dans la première). </p>
<dl class="section see"><dt>Voir également</dt><dd><a class="el" href="liste_8h.html#ae1e0f2a105ecb8e238eea0ce95ee68c8" title="Insere une liste au début d&#39;une autre liste.">Liste_insererListeDebut()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a3fc26dfaff4a3109c1786920de321c99"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int(* insererListeFin)(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l, struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *lAInserer)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Insère la deuxième liste dans la première à la fin (recopie de la deuxième dans la première). </p>
<dl class="section see"><dt>Voir également</dt><dd><a class="el" href="liste_8h.html#a64ceb7767b3518c245f2df2bfb6fc20d" title="Insere une liste à la fin d&#39;une autre liste.">Liste_insererListeFin()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a1cebe0b3480a5fbf3bd541400afda150"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="liste_8h.html#a15ddea793abf8d86dcbdc7772979cc00">Cellule</a>(* premierElement)(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Renvoie le premier element. </p>
<dl class="section see"><dt>Voir également</dt><dd><a class="el" href="liste_8h.html#a535dd7f340d38349554f8826b0b3992e" title="Accès au 1er élément de la liste.">Liste_premierElement()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a86119a3a032861a1c1cfbb1cd0b2c1e4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="struct_liste__struct.html">Liste_struct</a>*(* sousListe)(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l, int index)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">read</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Renvoie la sous-liste, extrai à partir de l'index jusqu'à la fin de la liste. </p>
<dl class="section see"><dt>Voir également</dt><dd><a class="el" href="liste_8h.html#a00a232260bad81af0a4b7f524d7af0cc" title="Renvoie la sous-liste d&#39;une liste à partir d&#39;une position.">Liste_sousListe()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a8c8a108fb838b2d6eb779e6c032e6135"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int(* supprimerAIndex)(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l, int index)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Supprime la cellule à l'index donné. </p>
<dl class="section see"><dt>Voir également</dt><dd><a class="el" href="liste_8h.html#a1294baa699d7dd782661ec48193e03bc" title="Supprime la cellule a l&#39;index indique dans une liste.">Liste_supprimerAIndex()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ad7f22345aee12ddc2dac84af984ce476"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int(* supprimerDernier)(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Supprime la dernière cellule de la liste. </p>
<dl class="section see"><dt>Voir également</dt><dd><a class="el" href="liste_8h.html#abec4215e9fe17248b29de8dd632a1127" title="Supprime le dernier élément d&#39;une liste.">Liste_supprimerDernier</a> </dd></dl>

</div>
</div>
<a class="anchor" id="abfd3a36b0e295e0fd1d1576dd1f92c04"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int(* supprimerPremier)(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Supprime la première cellule de la liste. </p>
<dl class="section see"><dt>Voir également</dt><dd><a class="el" href="liste_8h.html#a8980eae16dd6733b511ea9a046cac10b" title="Supprime le 1er élément d&#39;une liste.">Liste_supprimerPremier()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a1923c053c634b7e7eb5a7a37948fbe77"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int(* trier)(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Trie une liste dans l'ordre croissant, il faut que le type associé soit non-null. </p>
<dl class="section see"><dt>Voir également</dt><dd><a class="el" href="liste_8h.html#a5dac0089d200cda2516e45c5bdd12c00" title="Trie une liste.">Liste_trier()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a1fc69b0fa9643ff704ebae832bc5b7f9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int(* vider)(struct <a class="el" href="struct_liste__struct.html">Liste_struct</a> *l)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Vide la liste (Supprime tout les éléments). </p>
<dl class="section see"><dt>Voir également</dt><dd><a class="el" href="liste_8h.html#a29b240bfcd770d1562e0863118a53912" title="Vide une liste.">Liste_vider()</a> </dd></dl>

</div>
</div>
<hr/>La documentation de cette structure a été générée à partir du fichier suivant :<ul>
<li><a class="el" href="liste_8h_source.html">liste.h</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Généré le Samedi Décembre 1 2012 23:16:52 pour Liste doublement chainée par &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.2
</small></address>
</body>
</html>
