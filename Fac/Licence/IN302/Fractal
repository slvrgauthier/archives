(require (lib "turtles.ss" "graphics"))
(require (lib "turtle-examples.ss" "graphics"))
(require (lib "graphics.ss" "graphics"))

(define (t) (begin (turtles #t) (clear)))

;--------------------------------------------------------------------------------
;                                      vonKoch
;--------------------------------------------------------------------------------
(define (vonKoch rec long)(if (= rec 0) 
                             (draw long) 
                             (begin
                               (vonKoch (- rec 1) (/ long 3))
                               (turn 60)
                               (vonKoch (- rec 1) (/ long 3))
                               (turn 240)
                               (vonKoch (- rec 1) (/ long 3))
                               (turn 60)
                               (vonKoch (- rec 1) (/ long 3)))))

;--------------------------------------------------------------------------------
;                                     polyKoch
;--------------------------------------------------------------------------------
(define (polyKoch nbCot rec long) (let ((rec2 nbCot))
                                    (define (pK rec2) (if (= rec2 1)
                                                     (vonKoch rec long)
                                                     (begin
                                                       (vonKoch rec long)
                                                       (turn (/ 360 nbCot))
                                                       (pK (- rec2 1)))))
                                    (pK rec2)))
                       
                  

;--------------------------------------------------------------------------------
;                                    polyKoch 2
;--------------------------------------------------------------------------------
(define (polyKoch2 nbCot rec long) (let ((rec2 nbCot))
                                     (define (pK2 rec2) (if (= rec2 0) 
                                               (draw 0) 
                                               (begin 
                                                 (polyKoch nbCot rec long)
                                                 (pK2 (- rec2 1)))))
                                     (pK2 rec2)))

;--------------------------------------------------------------------------------
;                                      Arbre
;--------------------------------------------------------------------------------
(define (arbre rec long) (let ((rec2 0))
                      (define (arb rec2 long) (if (= rec2 rec) 
                                            (draw long) 
                                            (begin
                                              (draw long)
                                              (turn 60)
                                              (split (turn 240))
                                              (arb (+ rec2 1) (/ long 2)))))
                                              (arb rec2 long)))
 
;--------------------------------------------------------------------------------
;                                    polyArbre 
;--------------------------------------------------------------------------------
(define (polyArbre nbA rec long) (let ((nbA2 nbA))
                         (define (pA nbA2) (if (= nbA2 0) 
                                              (draw 0) 
                                              (begin
                                                (split (turn (/ 360 nbA)))
                                                (pA (- nbA2 1)))))
                         (pA nbA2)
                         (arbre rec long)))