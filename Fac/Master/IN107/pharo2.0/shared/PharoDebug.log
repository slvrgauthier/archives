THERE_BE_DRAGONS_HERE
Error: Class names must be capitalized
10 December 2013 10:06:50.802 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

ClassBuilder(Object)>>error:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		aString: 	'Class names must be capitalized'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>validateClassName:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		aString: 	#test
		allowed: 	#($0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $_ $A $B $C $D $E $F $G $H $I $J $K $L...etc...
		c: 	nil
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		className: 	#test
		env: 	a SystemDictionary(lots of globals)
		newSuper: 	Object
		type: 	#normal
		instVarString: 	''
		classVarString: 	''
		poolString: 	''
		category: 	'IN107'
		unsafe: 	false
		oldClass: 	nil
		instVars: 	#()
		classVars: 	#()
		copyOfOldClass: 	nil
		copyOfOldTraitComposition: 	nil
		copyOfOldClassTraitComposition: 	nil
		newClass: 	nil
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		className: 	#test
		env: 	a SystemDictionary(lots of globals)
		newSuper: 	Object
		type: 	#normal
		instVarString: 	''
		classVarString: 	''
		poolString: 	''
		category: 	'IN107'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		newSuper: 	Object
		t: 	#test
		f: 	''
		d: 	''
		s: 	''
		cat: 	'IN107'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


Object class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: Object
	Arguments and temporary variables: 
		t: 	#test
		f: 	''
		d: 	''
		s: 	''
		cat: 	'IN107'
		class: 	nil
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 339)
		format: 	2
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. Authorizer. Con...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(TextStyl...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	'Object subclass: #test
	instanceVariableNames: ''''
	classVariab...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a PluggableTextMorphWithLimits(640417792)
		failBlock: 	[^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ Object
		subclass: #test
		instanceVariableNames: ''
		clas...etc...
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream
		requestor: 	a PluggableTextMorphWithLimits(640417792)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


Compiler class>>evaluate:for:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'Object subclass: #test
	instanceVariableNames: ''''
	classVariab...etc...
		anObject: 	nil
		aController: 	a PluggableTextMorphWithLimits(640417792)
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->Compil...etc...
		format: 	142
		layout: 	nil
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


Compiler class>>evaluate:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'Object subclass: #test
	instanceVariableNames: ''''
	classVariab...etc...
		aController: 	a PluggableTextMorphWithLimits(640417792)
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->Compil...etc...
		format: 	142
		layout: 	nil
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


NautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aString: 	'Object subclass: #test
	instanceVariableNames: ''''
	classVariableNam...etc...
		aController: 	a PluggableTextMorphWithLimits(640417792)
		aClass: 	nil
		oldClass: 	nil
		class: 	nil
		newClassName: 	'test'
		defTokens: 	an OrderedCollection('Object' 'subclass:' '#test' 'instanceVariableN...etc...
		keywdIx: 	2
		envt: 	a SystemDictionary(lots of globals)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a Nautilus
		window: 	a NautilusWindow(751304704)
		hierarchyClass: 	nil
		cachedHierarchy: 	an IdentityDictionary()
		sourceTextArea: 	a PluggableTextMorphWithLimits(640417792)
		firstColumn: 	a PanelMorph(936378368)
		secondColumn: 	a PanelMorph(631767040)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a RPackage(IN107)->true )
		classesSelection: 	a Dictionary()
		list: 	a PluggableIconListMorph(972554240)
		list2: 	a PluggableIconListMorph(667942912)
		sourceCodePanel: 	a PanelMorph(470286336)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(136052736)
		list2Elements: 	#()
		listElements: 	an Array(a RPackage(AST-Core) a RPackage(AST-Core-Matching) a RPa...etc...
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(640417792)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(970194944)
		contentSelection: 	nil
		categories: 	nil
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		methods: 	nil


NautilusUI(AbstractNautilusUI)>>compileAClassFrom:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aString: 	'Object subclass: #test
	instanceVariableNames: ''''
	classVariableNam...etc...
		aController: 	a PluggableTextMorphWithLimits(640417792)
		class: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a Nautilus
		window: 	a NautilusWindow(751304704)
		hierarchyClass: 	nil
		cachedHierarchy: 	an IdentityDictionary()
		sourceTextArea: 	a PluggableTextMorphWithLimits(640417792)
		firstColumn: 	a PanelMorph(936378368)
		secondColumn: 	a PanelMorph(631767040)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a RPackage(IN107)->true )
		classesSelection: 	a Dictionary()
		list: 	a PluggableIconListMorph(972554240)
		list2: 	a PluggableIconListMorph(667942912)
		sourceCodePanel: 	a PanelMorph(470286336)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(136052736)
		list2Elements: 	#()
		listElements: 	an Array(a RPackage(AST-Core) a RPackage(AST-Core-Matching) a RPa...etc...
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(640417792)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(970194944)
		contentSelection: 	nil
		categories: 	nil
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		methods: 	nil


NautilusUI>>compileSource:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aText: 	a Text for 'Object subclass: #test
	instanceVariableNames: ''''
	classVa...etc...
		aController: 	a PluggableTextMorphWithLimits(640417792)
		source: 	'Object subclass: #test
	instanceVariableNames: ''''
	classVariableName...etc...
		category: 	nil
		method: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a Nautilus
		window: 	a NautilusWindow(751304704)
		hierarchyClass: 	nil
		cachedHierarchy: 	an IdentityDictionary()
		sourceTextArea: 	a PluggableTextMorphWithLimits(640417792)
		firstColumn: 	a PanelMorph(936378368)
		secondColumn: 	a PanelMorph(631767040)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a RPackage(IN107)->true )
		classesSelection: 	a Dictionary()
		list: 	a PluggableIconListMorph(972554240)
		list2: 	a PluggableIconListMorph(667942912)
		sourceCodePanel: 	a PanelMorph(470286336)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(136052736)
		list2Elements: 	#()
		listElements: 	an Array(a RPackage(AST-Core) a RPackage(AST-Core-Matching) a RPa...etc...
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(640417792)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(970194944)
		contentSelection: 	nil
		categories: 	nil
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		methods: 	nil


[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
	Receiver: a PluggableTextMorphWithLimits(640417792)
	Arguments and temporary variables: 
		acceptedText: 	a Text for 'Object subclass: #test
	instanceVariableNames: ''''
	...etc...
	Receiver's instance variables: 
		bounds: 	(128.0@352.0) corner: (944.0@629.0)
		owner: 	a MultipleMethodsEditor(970194944)
		submorphs: 	an Array(an AlphaImageMorph(423100416) a TransformMorph(983040000))
		fullBounds: 	(128@352) corner: (944@629)
		color: 	Color white
		extension: 	a MorphExtension (139722752) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(667418624)
		scroller: 	a TransformMorph(983040000)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(302514176)
		textMorph: 	a TextMorphForEditView(166985728)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(23 to: 22)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(423100416)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


BlockClosure>>ensure:
	Receiver: [^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perfo...etc...
	Arguments and temporary variables: 
		aBlock: 	[unstyledAcceptText := nil]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInMod...etc...
		startpc: 	65
		numArgs: 	0


PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
	Receiver: a PluggableTextMorphWithLimits(640417792)
	Arguments and temporary variables: 
		acceptedText: 	a Text for 'Object subclass: #test
	instanceVariableNames: ''''
	...etc...
	Receiver's instance variables: 
		bounds: 	(128.0@352.0) corner: (944.0@629.0)
		owner: 	a MultipleMethodsEditor(970194944)
		submorphs: 	an Array(an AlphaImageMorph(423100416) a TransformMorph(983040000))
		fullBounds: 	(128@352) corner: (944@629)
		color: 	Color white
		extension: 	a MorphExtension (139722752) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(667418624)
		scroller: 	a TransformMorph(983040000)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(302514176)
		textMorph: 	a TextMorphForEditView(166985728)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(23 to: 22)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(423100416)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptBasic
	Receiver: a PluggableTextMorphWithLimits(640417792)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	(23 to: 22)
		saveScrollerOffset: 	(-3@0)
	Receiver's instance variables: 
		bounds: 	(128.0@352.0) corner: (944.0@629.0)
		owner: 	a MultipleMethodsEditor(970194944)
		submorphs: 	an Array(an AlphaImageMorph(423100416) a TransformMorph(983040000))
		fullBounds: 	(128@352) corner: (944@629)
		color: 	Color white
		extension: 	a MorphExtension (139722752) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(667418624)
		scroller: 	a TransformMorph(983040000)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(302514176)
		textMorph: 	a TextMorphForEditView(166985728)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(23 to: 22)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(423100416)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits>>acceptBasic
	Receiver: a PluggableTextMorphWithLimits(640417792)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	nil
		saveScrollerOffset: 	nil
	Receiver's instance variables: 
		bounds: 	(128.0@352.0) corner: (944.0@629.0)
		owner: 	a MultipleMethodsEditor(970194944)
		submorphs: 	an Array(an AlphaImageMorph(423100416) a TransformMorph(983040000))
		fullBounds: 	(128@352) corner: (944@629)
		color: 	Color white
		extension: 	a MorphExtension (139722752) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(667418624)
		scroller: 	a TransformMorph(983040000)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(302514176)
		textMorph: 	a TextMorphForEditView(166985728)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(23 to: 22)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(423100416)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>accept
	Receiver: a PluggableTextMorphWithLimits(640417792)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(128.0@352.0) corner: (944.0@629.0)
		owner: 	a MultipleMethodsEditor(970194944)
		submorphs: 	an Array(an AlphaImageMorph(423100416) a TransformMorph(983040000))
		fullBounds: 	(128@352) corner: (944@629)
		color: 	Color white
		extension: 	a MorphExtension (139722752) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(667418624)
		scroller: 	a TransformMorph(983040000)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(302514176)
		textMorph: 	a TextMorphForEditView(166985728)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(23 to: 22)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(423100416)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView>>acceptContents
	Receiver: a TextMorphForEditView(166985728)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (808@82)
		owner: 	a TransformMorph(983040000)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (808@82)
		color: 	Color black
		extension: 	a MorphExtension (211812352) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Object subclass: #test
	instanceVariableNames: ''''
	classVar...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorphWithLimits(640417792)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[:morph | morph acceptContents] in TextMorph class>>buildTextEditorKeymapsOn:
	Receiver: TextMorph
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a TextMorphForEditView(166985728)
	Receiver's instance variables: 
		superclass: 	RectangleMorph
		methodDict: 	a MethodDictionary(size 203)
		format: 	166
		layout: 	nil
		instanceVariables: 	#('textStyle' 'text' 'wrapFlag' 'paragraph' 'editor' 'contai...etc...
		organization: 	a ClassOrganizer
		subclasses: 	{StringMorphEditor. TextMorphForEditView. GrowlMorph}
		name: 	#TextMorph
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Basic'
		traitComposition: 	TAbleToRotate
		localSelectors: 	a Set(#editorClass #setTextStyle: #setFirstCharacter: #margins:...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph acceptContents]
	Arguments and temporary variables: 
		anArg: 	a TextMorphForEditView(166985728)
	Receiver's instance variables: 
		outerContext: 	TextMorph class>>buildTextEditorKeymapsOn:
		startpc: 	88
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph acceptContents]
	Arguments and temporary variables: 
		firstArg: 	a TextMorphForEditView(166985728)
		secondArg: 	a TextMorphForEditView(166985728)
	Receiver's instance variables: 
		outerContext: 	TextMorph class>>buildTextEditorKeymapsOn:
		startpc: 	88
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph acceptContents]
	Arguments and temporary variables: 
		firstArg: 	a TextMorphForEditView(166985728)
		secondArg: 	a TextMorphForEditView(166985728)
		thirdArg: 	[keystroke '<Ctrl-s>']
	Receiver's instance variables: 
		outerContext: 	TextMorph class>>buildTextEditorKeymapsOn:
		startpc: 	88
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#TextMorph)
	Arguments and temporary variables: 
		aKeymap: 	#accept on Ctrl + S do [:morph | morph acceptContents]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
	Receiver's instance variables: 
		target: 	a TextMorphForEditView(166985728)
		category: 	a KMCategory
		morph: 	a TextMorphForEditView(166985728)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #accept on Ctrl + S do [:morph | morph acceptContents]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		listeners: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		l: 	aKMCategoryTarget(#TextMorph)
	Receiver's instance variables: 
		action: 	[:morph | morph acceptContents]
		name: 	#accept
		shortcut: 	Ctrl + S
		defaultShortcut: 	Ctrl + S
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #accept on Ctrl + S do [:morph | morph acceptContents]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		listeners: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph acceptContents]
		name: 	#accept
		shortcut: 	Ctrl + S
		defaultShortcut: 	Ctrl + S
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #accept on Ctrl + S do [:morph | morph acceptContents]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph acceptContents]
		name: 	#accept
		shortcut: 	Ctrl + S
		defaultShortcut: 	Ctrl + S
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#accept on Ctrl + S do [:morph | morph acceptContents]

	Receiver's instance variables: 
		name: 	#TextMorph
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#accept on Ctrl + S do [:morph | morph acceptContents]
)
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	4
		each: 	#accept on Ctrl + S do [:morph | morph acceptContents]

		indexLimiT: 	5
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil #accept on Ctrl + S do [:morph | morph acceptConten...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#TextMorph
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#TextMorph)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a TextMorphForEditView(166985728)
		category: 	a KMCategory
		morph: 	a TextMorphForEditView(166985728)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#TextMorph)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(166985728)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	4


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(166985728)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TextMorphForEditView(166985728)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-s>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(166985728)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(166985728)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-s>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (808@82)
		owner: 	a TransformMorph(983040000)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (808@82)
		color: 	Color black
		extension: 	a MorphExtension (211812352) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Object subclass: #test
	instanceVariableNames: ''''
	classVar...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorphWithLimits(640417792)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
ClassBuilder(Object)>>error:
ClassBuilder>>validateClassName:
ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
ClassBuilder>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
Object class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
Compiler class>>evaluate:for:notifying:logged:
Compiler class>>evaluate:notifying:logged:
NautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
NautilusUI(AbstractNautilusUI)>>compileAClassFrom:notifying:
NautilusUI>>compileSource:notifying:
[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
BlockClosure>>ensure:
PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptBasic
PluggableTextMorphWithLimits>>acceptBasic
PluggableTextMorphWithLimits(PluggableTextMorph)>>accept
TextMorphForEditView>>acceptContents
[:morph | morph acceptContents] in TextMorph class>>buildTextEditorKeymapsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: EtatCalculette[] is not a legal inst var name
10 December 2013 10:19:18.232 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

ClassBuilder(Object)>>error:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		aString: 	'EtatCalculette[] is not a legal inst var name'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


[:name | name isLegalInstVarName
		ifFalse: [self error: name , ' is not a legal inst var name']] in ClassBuilder>>validateClassvars:from:forSuper:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		classVarArray: 	#(#EtatCalculette #'EtatCalculette[]')
		oldClass: 	Calculette
		newSuper: 	Object
		classVars: 	nil
		usedNames: 	a Set(#'EtatCalculette[]' #EtatCalculette)
		temp: 	nil
		name: 	#'EtatCalculette[]'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


Set>>do:
	Receiver: a Set(#'EtatCalculette[]' #EtatCalculette)
	Arguments and temporary variables: 
		aBlock: 	[:name | name isLegalInstVarName
		ifFalse: [self error: name , ' is no...etc...
		index: 	1
		each: 	#'EtatCalculette[]'
		indexLimiT: 	7
	Receiver's instance variables: 
		tally: 	2
		array: 	#(#'EtatCalculette[]' nil nil nil #EtatCalculette nil nil)


ClassBuilder>>validateClassvars:from:forSuper:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		classVarArray: 	#(#EtatCalculette #'EtatCalculette[]')
		oldClass: 	Calculette
		newSuper: 	Object
		classVars: 	nil
		usedNames: 	a Set(#'EtatCalculette[]' #EtatCalculette)
		temp: 	nil
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


[| newCategory oldCategory needNew force organization |
unsafe
		ifFalse: [(self validateSuperclass: newSuper forSubclass: oldClass)
				ifFalse: [^ nil].
			(self
					validateInstvars: instVars
					from: oldClass
					forSuper: newSuper)
				ifFalse: [^ nil].
			(self
					validateClassvars: classVars
					from: oldClass
					forSuper: newSuper)
				ifFalse: [^ nil].
			(self
					validateSubclassFormat: type
					from: oldClass
					forSuper: newSuper
					extra: instVars size)
				ifFalse: [^ nil]].
	needNew := self
				needsSubclassOf: newSuper
				type: type
				instanceVariables: instVars
				from: oldClass.
	needNew
		ifNil: [^ nil].
	(needNew
			and: [unsafe not])
		ifTrue: [(self tooDangerousClasses includes: oldClass name)
				ifTrue: [self error: oldClass name , ' cannot be changed'].
			(oldClass ~~ nil
					and: [oldClass shouldNotBeRedefined])
				ifTrue: [self notify: oldClass name asText allBold , ' should not be redefined. \Proceed to store over it.' withCRs]].
	needNew
		ifTrue: [newClass := self
						newSubclassOf: newSuper
						type: type
						instanceVariables: instVars
						from: oldClass.
			newClass
				ifNil: [^ nil].
			newClass setName: className]
		ifFalse: [newClass := oldClass].
	force := (newClass declare: classVarString)
				| (newClass sharing: poolString).
	newCategory := category asSymbol.
	organization := environ
				ifNotNil: [environ organization].
	oldClass isNil
		ifFalse: [oldCategory := (organization categoryOfElement: oldClass name) asSymbol].
	organization classify: newClass name under: newCategory.
	newClass environment: environ.
	newClass := self
				recompile: force
				from: oldClass
				to: newClass
				mutate: false.
	(environ
			at: newClass name
			ifAbsent: [])
			== newClass
		ifFalse: [environ at: newClass name put: newClass.
			Smalltalk globals flushClassNameCache].
	copyOfOldTraitComposition
		ifNotNil: [newClass setTraitComposition: copyOfOldTraitComposition].
	copyOfOldClassTraitComposition
		ifNotNil: [newClass class setTraitComposition: copyOfOldClassTraitComposition].
	newClass doneCompiling.
	oldClass isNil
		ifTrue: [SystemAnnouncer uniqueInstance classAdded: newClass inCategory: newCategory.
			^ newClass].
	newCategory ~= oldCategory
		ifTrue: [SystemAnnouncer uniqueInstance
				class: newClass
				recategorizedFrom: oldCategory
				to: category]
		ifFalse: [SystemAnnouncer uniqueInstance classDefinitionChangedFrom: copyOfOldClass to: newClass]] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		className: 	#Calculette
		env: 	a SystemDictionary(lots of globals)
		newSuper: 	Object
		type: 	#normal
		instVarString: 	'etatCourant etats'
		classVarString: 	'EtatCalculette EtatCalculette[]'
		poolString: 	''
		category: 	'IN107'
		unsafe: 	false
		oldClass: 	Calculette
		instVars: 	#('etatCourant' 'etats')
		classVars: 	#(#EtatCalculette #'EtatCalculette[]')
		copyOfOldClass: 	Calculette
		copyOfOldTraitComposition: 	nil
		copyOfOldClassTraitComposition: 	nil
		newClass: 	nil
		newCategory: 	nil
		oldCategory: 	nil
		needNew: 	nil
		force: 	nil
		organization: 	nil
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


BlockClosure>>ensure:
	Receiver: [| newCategory oldCategory needNew force organization |
unsafe
		ifFalse: [(self validateS...etc...
	Arguments and temporary variables: 
		aBlock: 	[copyOfOldClass
		ifNotNil: [copyOfOldClass superclass removeSubclass: ...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariable...etc...
		startpc: 	376
		numArgs: 	0


ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		className: 	#Calculette
		env: 	a SystemDictionary(lots of globals)
		newSuper: 	Object
		type: 	#normal
		instVarString: 	'etatCourant etats'
		classVarString: 	'EtatCalculette EtatCalculette[]'
		poolString: 	''
		category: 	'IN107'
		unsafe: 	false
		oldClass: 	Calculette
		instVars: 	#('etatCourant' 'etats')
		classVars: 	#(#EtatCalculette #'EtatCalculette[]')
		copyOfOldClass: 	Calculette
		copyOfOldTraitComposition: 	nil
		copyOfOldClassTraitComposition: 	nil
		newClass: 	nil
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		className: 	#Calculette
		env: 	a SystemDictionary(lots of globals)
		newSuper: 	Object
		type: 	#normal
		instVarString: 	'etatCourant etats'
		classVarString: 	'EtatCalculette EtatCalculette[]'
		poolString: 	''
		category: 	'IN107'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		newSuper: 	Object
		t: 	#Calculette
		f: 	'etatCourant etats'
		d: 	'EtatCalculette EtatCalculette[]'
		s: 	''
		cat: 	'IN107'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


Object class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: Object
	Arguments and temporary variables: 
		t: 	#Calculette
		f: 	'etatCourant etats'
		d: 	'EtatCalculette EtatCalculette[]'
		s: 	''
		cat: 	'IN107'
		class: 	nil
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 339)
		format: 	2
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(an Order...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	'Object subclass: #Calculette
	instanceVariableNames: ''etatCoura...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a PluggableTextMorphWithLimits(640417792)
		failBlock: 	[^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ Object
		subclass: #Calculette
		instanceVariableNames: 'et...etc...
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream
		requestor: 	a PluggableTextMorphWithLimits(640417792)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


Compiler class>>evaluate:for:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'Object subclass: #Calculette
	instanceVariableNames: ''etatCoura...etc...
		anObject: 	nil
		aController: 	a PluggableTextMorphWithLimits(640417792)
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->Compil...etc...
		format: 	142
		layout: 	nil
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


Compiler class>>evaluate:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'Object subclass: #Calculette
	instanceVariableNames: ''etatCoura...etc...
		aController: 	a PluggableTextMorphWithLimits(640417792)
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->Compil...etc...
		format: 	142
		layout: 	nil
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


NautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aString: 	'Object subclass: #Calculette
	instanceVariableNames: ''etatCourant et...etc...
		aController: 	a PluggableTextMorphWithLimits(640417792)
		aClass: 	Calculette
		oldClass: 	Object
		class: 	nil
		newClassName: 	'Calculette'
		defTokens: 	an OrderedCollection('Object' 'subclass:' '#Calculette' 'instanceVar...etc...
		keywdIx: 	2
		envt: 	a SystemDictionary(lots of globals)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a Nautilus
		window: 	a NautilusWindow(751304704)
		hierarchyClass: 	Calculette
		cachedHierarchy: 	an IdentityDictionary(Calculette->an OrderedCollection(' ' Cal...etc...
		sourceTextArea: 	a PluggableTextMorphWithLimits(640417792)
		firstColumn: 	a PanelMorph(936378368)
		secondColumn: 	a PanelMorph(631767040)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a RPackage(IN107)->true )
		classesSelection: 	a Dictionary(Calculette->true )
		list: 	a PluggableIconListMorph(972554240)
		list2: 	a PluggableIconListMorph(667942912)
		sourceCodePanel: 	a PanelMorph(470286336)
		commentTextArea: 	a PluggableTextMorph(1009516544)
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(136052736)
		list2Elements: 	{Calculette. Test}
		listElements: 	an Array(a RPackage(AST-Core) a RPackage(AST-Core-Matching) a RPa...etc...
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(640417792)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(970194944)
		contentSelection: 	nil
		categories: 	nil
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		methods: 	nil


NautilusUI(AbstractNautilusUI)>>compileAClassFrom:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aString: 	'Object subclass: #Calculette
	instanceVariableNames: ''etatCourant et...etc...
		aController: 	a PluggableTextMorphWithLimits(640417792)
		class: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a Nautilus
		window: 	a NautilusWindow(751304704)
		hierarchyClass: 	Calculette
		cachedHierarchy: 	an IdentityDictionary(Calculette->an OrderedCollection(' ' Cal...etc...
		sourceTextArea: 	a PluggableTextMorphWithLimits(640417792)
		firstColumn: 	a PanelMorph(936378368)
		secondColumn: 	a PanelMorph(631767040)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a RPackage(IN107)->true )
		classesSelection: 	a Dictionary(Calculette->true )
		list: 	a PluggableIconListMorph(972554240)
		list2: 	a PluggableIconListMorph(667942912)
		sourceCodePanel: 	a PanelMorph(470286336)
		commentTextArea: 	a PluggableTextMorph(1009516544)
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(136052736)
		list2Elements: 	{Calculette. Test}
		listElements: 	an Array(a RPackage(AST-Core) a RPackage(AST-Core-Matching) a RPa...etc...
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(640417792)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(970194944)
		contentSelection: 	nil
		categories: 	nil
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		methods: 	nil


NautilusUI>>compileSource:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aText: 	a Text for 'Object subclass: #Calculette
	instanceVariableNames: ''etatC...etc...
		aController: 	a PluggableTextMorphWithLimits(640417792)
		source: 	'Object subclass: #Calculette
	instanceVariableNames: ''etatCourant eta...etc...
		category: 	nil
		method: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a Nautilus
		window: 	a NautilusWindow(751304704)
		hierarchyClass: 	Calculette
		cachedHierarchy: 	an IdentityDictionary(Calculette->an OrderedCollection(' ' Cal...etc...
		sourceTextArea: 	a PluggableTextMorphWithLimits(640417792)
		firstColumn: 	a PanelMorph(936378368)
		secondColumn: 	a PanelMorph(631767040)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a RPackage(IN107)->true )
		classesSelection: 	a Dictionary(Calculette->true )
		list: 	a PluggableIconListMorph(972554240)
		list2: 	a PluggableIconListMorph(667942912)
		sourceCodePanel: 	a PanelMorph(470286336)
		commentTextArea: 	a PluggableTextMorph(1009516544)
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(136052736)
		list2Elements: 	{Calculette. Test}
		listElements: 	an Array(a RPackage(AST-Core) a RPackage(AST-Core-Matching) a RPa...etc...
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(640417792)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(970194944)
		contentSelection: 	nil
		categories: 	nil
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		methods: 	nil


[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
	Receiver: a PluggableTextMorphWithLimits(640417792)
	Arguments and temporary variables: 
		acceptedText: 	a Text for 'Object subclass: #Calculette
	instanceVariableNames: ...etc...
	Receiver's instance variables: 
		bounds: 	(128.0@352.0) corner: (944.0@629.0)
		owner: 	a MultipleMethodsEditor(970194944)
		submorphs: 	an Array(an AlphaImageMorph(423100416) a TransformMorph(983040000))
		fullBounds: 	(128@352) corner: (944@629)
		color: 	Color white
		extension: 	a MorphExtension (139722752) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(667418624)
		scroller: 	a TransformMorph(983040000)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(302514176)
		textMorph: 	a TextMorphForEditView(166985728)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(127 to: 126)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(423100416)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


BlockClosure>>ensure:
	Receiver: [^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perfo...etc...
	Arguments and temporary variables: 
		aBlock: 	[unstyledAcceptText := nil]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInMod...etc...
		startpc: 	65
		numArgs: 	0


PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
	Receiver: a PluggableTextMorphWithLimits(640417792)
	Arguments and temporary variables: 
		acceptedText: 	a Text for 'Object subclass: #Calculette
	instanceVariableNames: ...etc...
	Receiver's instance variables: 
		bounds: 	(128.0@352.0) corner: (944.0@629.0)
		owner: 	a MultipleMethodsEditor(970194944)
		submorphs: 	an Array(an AlphaImageMorph(423100416) a TransformMorph(983040000))
		fullBounds: 	(128@352) corner: (944@629)
		color: 	Color white
		extension: 	a MorphExtension (139722752) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(667418624)
		scroller: 	a TransformMorph(983040000)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(302514176)
		textMorph: 	a TextMorphForEditView(166985728)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(127 to: 126)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(423100416)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptBasic
	Receiver: a PluggableTextMorphWithLimits(640417792)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	(127 to: 126)
		saveScrollerOffset: 	(-3@0)
	Receiver's instance variables: 
		bounds: 	(128.0@352.0) corner: (944.0@629.0)
		owner: 	a MultipleMethodsEditor(970194944)
		submorphs: 	an Array(an AlphaImageMorph(423100416) a TransformMorph(983040000))
		fullBounds: 	(128@352) corner: (944@629)
		color: 	Color white
		extension: 	a MorphExtension (139722752) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(667418624)
		scroller: 	a TransformMorph(983040000)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(302514176)
		textMorph: 	a TextMorphForEditView(166985728)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(127 to: 126)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(423100416)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits>>acceptBasic
	Receiver: a PluggableTextMorphWithLimits(640417792)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	nil
		saveScrollerOffset: 	nil
	Receiver's instance variables: 
		bounds: 	(128.0@352.0) corner: (944.0@629.0)
		owner: 	a MultipleMethodsEditor(970194944)
		submorphs: 	an Array(an AlphaImageMorph(423100416) a TransformMorph(983040000))
		fullBounds: 	(128@352) corner: (944@629)
		color: 	Color white
		extension: 	a MorphExtension (139722752) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(667418624)
		scroller: 	a TransformMorph(983040000)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(302514176)
		textMorph: 	a TextMorphForEditView(166985728)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(127 to: 126)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(423100416)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>accept
	Receiver: a PluggableTextMorphWithLimits(640417792)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(128.0@352.0) corner: (944.0@629.0)
		owner: 	a MultipleMethodsEditor(970194944)
		submorphs: 	an Array(an AlphaImageMorph(423100416) a TransformMorph(983040000))
		fullBounds: 	(128@352) corner: (944@629)
		color: 	Color white
		extension: 	a MorphExtension (139722752) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(667418624)
		scroller: 	a TransformMorph(983040000)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(302514176)
		textMorph: 	a TextMorphForEditView(166985728)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(127 to: 126)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(423100416)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView>>acceptContents
	Receiver: a TextMorphForEditView(166985728)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (808@82)
		owner: 	a TransformMorph(983040000)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (808@82)
		color: 	Color black
		extension: 	a MorphExtension (211812352) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Object subclass: #Calculette
	instanceVariableNames: ''etatCo...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorphWithLimits(640417792)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[:morph | morph acceptContents] in TextMorph class>>buildTextEditorKeymapsOn:
	Receiver: TextMorph
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a TextMorphForEditView(166985728)
	Receiver's instance variables: 
		superclass: 	RectangleMorph
		methodDict: 	a MethodDictionary(size 203)
		format: 	166
		layout: 	nil
		instanceVariables: 	#('textStyle' 'text' 'wrapFlag' 'paragraph' 'editor' 'contai...etc...
		organization: 	a ClassOrganizer
		subclasses: 	{StringMorphEditor. TextMorphForEditView. GrowlMorph}
		name: 	#TextMorph
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Basic'
		traitComposition: 	TAbleToRotate
		localSelectors: 	a Set(#editorClass #setTextStyle: #setFirstCharacter: #margins:...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph acceptContents]
	Arguments and temporary variables: 
		anArg: 	a TextMorphForEditView(166985728)
	Receiver's instance variables: 
		outerContext: 	TextMorph class>>buildTextEditorKeymapsOn:
		startpc: 	88
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph acceptContents]
	Arguments and temporary variables: 
		firstArg: 	a TextMorphForEditView(166985728)
		secondArg: 	a TextMorphForEditView(166985728)
	Receiver's instance variables: 
		outerContext: 	TextMorph class>>buildTextEditorKeymapsOn:
		startpc: 	88
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph acceptContents]
	Arguments and temporary variables: 
		firstArg: 	a TextMorphForEditView(166985728)
		secondArg: 	a TextMorphForEditView(166985728)
		thirdArg: 	[keystroke '<Ctrl-s>']
	Receiver's instance variables: 
		outerContext: 	TextMorph class>>buildTextEditorKeymapsOn:
		startpc: 	88
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#TextMorph)
	Arguments and temporary variables: 
		aKeymap: 	#accept on Ctrl + S do [:morph | morph acceptContents]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
	Receiver's instance variables: 
		target: 	a TextMorphForEditView(166985728)
		category: 	a KMCategory
		morph: 	a TextMorphForEditView(166985728)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #accept on Ctrl + S do [:morph | morph acceptContents]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		listeners: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		l: 	aKMCategoryTarget(#TextMorph)
	Receiver's instance variables: 
		action: 	[:morph | morph acceptContents]
		name: 	#accept
		shortcut: 	Ctrl + S
		defaultShortcut: 	Ctrl + S
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #accept on Ctrl + S do [:morph | morph acceptContents]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		listeners: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph acceptContents]
		name: 	#accept
		shortcut: 	Ctrl + S
		defaultShortcut: 	Ctrl + S
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #accept on Ctrl + S do [:morph | morph acceptContents]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph acceptContents]
		name: 	#accept
		shortcut: 	Ctrl + S
		defaultShortcut: 	Ctrl + S
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#accept on Ctrl + S do [:morph | morph acceptContents]

	Receiver's instance variables: 
		name: 	#TextMorph
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#accept on Ctrl + S do [:morph | morph acceptContents]
)
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	4
		each: 	#accept on Ctrl + S do [:morph | morph acceptContents]

		indexLimiT: 	5
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil #accept on Ctrl + S do [:morph | morph acceptConten...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#TextMorph
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#TextMorph)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a TextMorphForEditView(166985728)
		category: 	a KMCategory
		morph: 	a TextMorphForEditView(166985728)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#TextMorph)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(166985728)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	4
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	4



--- The full stack ---
ClassBuilder(Object)>>error:
[:name | name isLegalInstVarName
		ifFalse: [self error: name , ' is not a legal inst var name']] in ClassBuilder>>validateClassvars:from:forSuper:
Set>>do:
ClassBuilder>>validateClassvars:from:forSuper:
[| newCategory oldCategory needNew force organization |
unsafe
		ifFalse: [(self validateSuperclass: newSuper forSubclass: oldClass)
				ifFalse: [^ nil].
			(self
					validateInstvars: instVars
					from: oldClass
					forSuper: newSuper)
				ifFalse: [^ nil].
			(self
					validateClassvars: classVars
					from: oldClass
					forSuper: newSuper)
				ifFalse: [^ nil].
			(self
					validateSubclassFormat: type
					from: oldClass
					forSuper: newSuper
					extra: instVars size)
				ifFalse: [^ nil]].
	needNew := self
				needsSubclassOf: newSuper
				type: type
				instanceVariables: instVars
				from: oldClass.
	needNew
		ifNil: [^ nil].
	(needNew
			and: [unsafe not])
		ifTrue: [(self tooDangerousClasses includes: oldClass name)
				ifTrue: [self error: oldClass name , ' cannot be changed'].
			(oldClass ~~ nil
					and: [oldClass shouldNotBeRedefined])
				ifTrue: [self notify: oldClass name asText allBold , ' should not be redefined. \Proceed to store over it.' withCRs]].
	needNew
		ifTrue: [newClass := self
						newSubclassOf: newSuper
						type: type
						instanceVariables: instVars
						from: oldClass.
			newClass
				ifNil: [^ nil].
			newClass setName: className]
		ifFalse: [newClass := oldClass].
	force := (newClass declare: classVarString)
				| (newClass sharing: poolString).
	newCategory := category asSymbol.
	organization := environ
				ifNotNil: [environ organization].
	oldClass isNil
		ifFalse: [oldCategory := (organization categoryOfElement: oldClass name) asSymbol].
	organization classify: newClass name under: newCategory.
	newClass environment: environ.
	newClass := self
				recompile: force
				from: oldClass
				to: newClass
				mutate: false.
	(environ
			at: newClass name
			ifAbsent: [])
			== newClass
		ifFalse: [environ at: newClass name put: newClass.
			Smalltalk globals flushClassNameCache].
	copyOfOldTraitComposition
		ifNotNil: [newClass setTraitComposition: copyOfOldTraitComposition].
	copyOfOldClassTraitComposition
		ifNotNil: [newClass class setTraitComposition: copyOfOldClassTraitComposition].
	newClass doneCompiling.
	oldClass isNil
		ifTrue: [SystemAnnouncer uniqueInstance classAdded: newClass inCategory: newCategory.
			^ newClass].
	newCategory ~= oldCategory
		ifTrue: [SystemAnnouncer uniqueInstance
				class: newClass
				recategorizedFrom: oldCategory
				to: category]
		ifFalse: [SystemAnnouncer uniqueInstance classDefinitionChangedFrom: copyOfOldClass to: newClass]] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
BlockClosure>>ensure:
ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
ClassBuilder>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
Object class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
Compiler class>>evaluate:for:notifying:logged:
Compiler class>>evaluate:notifying:logged:
NautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
NautilusUI(AbstractNautilusUI)>>compileAClassFrom:notifying:
NautilusUI>>compileSource:notifying:
[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
BlockClosure>>ensure:
PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptBasic
PluggableTextMorphWithLimits>>acceptBasic
PluggableTextMorphWithLimits(PluggableTextMorph)>>accept
TextMorphForEditView>>acceptContents
[:morph | morph acceptContents] in TextMorph class>>buildTextEditorKeymapsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: EtatCalculette is multiply defined
10 December 2013 10:19:50.732 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

ClassBuilder(Object)>>error:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		aString: 	'EtatCalculette is multiply defined'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>validateClassvars:from:forSuper:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		classVarArray: 	#(#EtatCalculette #EtatCalculette)
		oldClass: 	Calculette
		newSuper: 	Object
		classVars: 	nil
		usedNames: 	a Set()
		temp: 	#EtatCalculette
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


[| newCategory oldCategory needNew force organization |
unsafe
		ifFalse: [(self validateSuperclass: newSuper forSubclass: oldClass)
				ifFalse: [^ nil].
			(self
					validateInstvars: instVars
					from: oldClass
					forSuper: newSuper)
				ifFalse: [^ nil].
			(self
					validateClassvars: classVars
					from: oldClass
					forSuper: newSuper)
				ifFalse: [^ nil].
			(self
					validateSubclassFormat: type
					from: oldClass
					forSuper: newSuper
					extra: instVars size)
				ifFalse: [^ nil]].
	needNew := self
				needsSubclassOf: newSuper
				type: type
				instanceVariables: instVars
				from: oldClass.
	needNew
		ifNil: [^ nil].
	(needNew
			and: [unsafe not])
		ifTrue: [(self tooDangerousClasses includes: oldClass name)
				ifTrue: [self error: oldClass name , ' cannot be changed'].
			(oldClass ~~ nil
					and: [oldClass shouldNotBeRedefined])
				ifTrue: [self notify: oldClass name asText allBold , ' should not be redefined. \Proceed to store over it.' withCRs]].
	needNew
		ifTrue: [newClass := self
						newSubclassOf: newSuper
						type: type
						instanceVariables: instVars
						from: oldClass.
			newClass
				ifNil: [^ nil].
			newClass setName: className]
		ifFalse: [newClass := oldClass].
	force := (newClass declare: classVarString)
				| (newClass sharing: poolString).
	newCategory := category asSymbol.
	organization := environ
				ifNotNil: [environ organization].
	oldClass isNil
		ifFalse: [oldCategory := (organization categoryOfElement: oldClass name) asSymbol].
	organization classify: newClass name under: newCategory.
	newClass environment: environ.
	newClass := self
				recompile: force
				from: oldClass
				to: newClass
				mutate: false.
	(environ
			at: newClass name
			ifAbsent: [])
			== newClass
		ifFalse: [environ at: newClass name put: newClass.
			Smalltalk globals flushClassNameCache].
	copyOfOldTraitComposition
		ifNotNil: [newClass setTraitComposition: copyOfOldTraitComposition].
	copyOfOldClassTraitComposition
		ifNotNil: [newClass class setTraitComposition: copyOfOldClassTraitComposition].
	newClass doneCompiling.
	oldClass isNil
		ifTrue: [SystemAnnouncer uniqueInstance classAdded: newClass inCategory: newCategory.
			^ newClass].
	newCategory ~= oldCategory
		ifTrue: [SystemAnnouncer uniqueInstance
				class: newClass
				recategorizedFrom: oldCategory
				to: category]
		ifFalse: [SystemAnnouncer uniqueInstance classDefinitionChangedFrom: copyOfOldClass to: newClass]] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		className: 	#Calculette
		env: 	a SystemDictionary(lots of globals)
		newSuper: 	Object
		type: 	#normal
		instVarString: 	'etatCourant etats'
		classVarString: 	'EtatCalculette EtatCalculette'
		poolString: 	''
		category: 	'IN107'
		unsafe: 	false
		oldClass: 	Calculette
		instVars: 	#('etatCourant' 'etats')
		classVars: 	#(#EtatCalculette #EtatCalculette)
		copyOfOldClass: 	Calculette
		copyOfOldTraitComposition: 	nil
		copyOfOldClassTraitComposition: 	nil
		newClass: 	nil
		newCategory: 	nil
		oldCategory: 	nil
		needNew: 	nil
		force: 	nil
		organization: 	nil
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


BlockClosure>>ensure:
	Receiver: [| newCategory oldCategory needNew force organization |
unsafe
		ifFalse: [(self validateS...etc...
	Arguments and temporary variables: 
		aBlock: 	[copyOfOldClass
		ifNotNil: [copyOfOldClass superclass removeSubclass: ...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariable...etc...
		startpc: 	376
		numArgs: 	0


ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		className: 	#Calculette
		env: 	a SystemDictionary(lots of globals)
		newSuper: 	Object
		type: 	#normal
		instVarString: 	'etatCourant etats'
		classVarString: 	'EtatCalculette EtatCalculette'
		poolString: 	''
		category: 	'IN107'
		unsafe: 	false
		oldClass: 	Calculette
		instVars: 	#('etatCourant' 'etats')
		classVars: 	#(#EtatCalculette #EtatCalculette)
		copyOfOldClass: 	Calculette
		copyOfOldTraitComposition: 	nil
		copyOfOldClassTraitComposition: 	nil
		newClass: 	nil
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		className: 	#Calculette
		env: 	a SystemDictionary(lots of globals)
		newSuper: 	Object
		type: 	#normal
		instVarString: 	'etatCourant etats'
		classVarString: 	'EtatCalculette EtatCalculette'
		poolString: 	''
		category: 	'IN107'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		newSuper: 	Object
		t: 	#Calculette
		f: 	'etatCourant etats'
		d: 	'EtatCalculette EtatCalculette'
		s: 	''
		cat: 	'IN107'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


Object class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: Object
	Arguments and temporary variables: 
		t: 	#Calculette
		f: 	'etatCourant etats'
		d: 	'EtatCalculette EtatCalculette'
		s: 	''
		cat: 	'IN107'
		class: 	nil
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 339)
		format: 	2
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(an Order...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	'Object subclass: #Calculette
	instanceVariableNames: ''etatCoura...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a PluggableTextMorphWithLimits(640417792)
		failBlock: 	[^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ Object
		subclass: #Calculette
		instanceVariableNames: 'et...etc...
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream
		requestor: 	a PluggableTextMorphWithLimits(640417792)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


Compiler class>>evaluate:for:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'Object subclass: #Calculette
	instanceVariableNames: ''etatCoura...etc...
		anObject: 	nil
		aController: 	a PluggableTextMorphWithLimits(640417792)
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->Compil...etc...
		format: 	142
		layout: 	nil
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


Compiler class>>evaluate:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'Object subclass: #Calculette
	instanceVariableNames: ''etatCoura...etc...
		aController: 	a PluggableTextMorphWithLimits(640417792)
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->Compil...etc...
		format: 	142
		layout: 	nil
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


NautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aString: 	'Object subclass: #Calculette
	instanceVariableNames: ''etatCourant et...etc...
		aController: 	a PluggableTextMorphWithLimits(640417792)
		aClass: 	Calculette
		oldClass: 	Object
		class: 	nil
		newClassName: 	'Calculette'
		defTokens: 	an OrderedCollection('Object' 'subclass:' '#Calculette' 'instanceVar...etc...
		keywdIx: 	2
		envt: 	a SystemDictionary(lots of globals)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a Nautilus
		window: 	a NautilusWindow(751304704)
		hierarchyClass: 	Calculette
		cachedHierarchy: 	an IdentityDictionary(Calculette->an OrderedCollection(' ' Cal...etc...
		sourceTextArea: 	a PluggableTextMorphWithLimits(640417792)
		firstColumn: 	a PanelMorph(936378368)
		secondColumn: 	a PanelMorph(631767040)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a RPackage(IN107)->true )
		classesSelection: 	a Dictionary(Calculette->true )
		list: 	a PluggableIconListMorph(972554240)
		list2: 	a PluggableIconListMorph(667942912)
		sourceCodePanel: 	a PanelMorph(470286336)
		commentTextArea: 	a PluggableTextMorph(1009516544)
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(136052736)
		list2Elements: 	{Calculette. Test}
		listElements: 	an Array(a RPackage(AST-Core) a RPackage(AST-Core-Matching) a RPa...etc...
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(640417792)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(970194944)
		contentSelection: 	nil
		categories: 	nil
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		methods: 	nil


NautilusUI(AbstractNautilusUI)>>compileAClassFrom:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aString: 	'Object subclass: #Calculette
	instanceVariableNames: ''etatCourant et...etc...
		aController: 	a PluggableTextMorphWithLimits(640417792)
		class: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a Nautilus
		window: 	a NautilusWindow(751304704)
		hierarchyClass: 	Calculette
		cachedHierarchy: 	an IdentityDictionary(Calculette->an OrderedCollection(' ' Cal...etc...
		sourceTextArea: 	a PluggableTextMorphWithLimits(640417792)
		firstColumn: 	a PanelMorph(936378368)
		secondColumn: 	a PanelMorph(631767040)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a RPackage(IN107)->true )
		classesSelection: 	a Dictionary(Calculette->true )
		list: 	a PluggableIconListMorph(972554240)
		list2: 	a PluggableIconListMorph(667942912)
		sourceCodePanel: 	a PanelMorph(470286336)
		commentTextArea: 	a PluggableTextMorph(1009516544)
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(136052736)
		list2Elements: 	{Calculette. Test}
		listElements: 	an Array(a RPackage(AST-Core) a RPackage(AST-Core-Matching) a RPa...etc...
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(640417792)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(970194944)
		contentSelection: 	nil
		categories: 	nil
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		methods: 	nil


NautilusUI>>compileSource:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aText: 	a Text for 'Object subclass: #Calculette
	instanceVariableNames: ''etatC...etc...
		aController: 	a PluggableTextMorphWithLimits(640417792)
		source: 	'Object subclass: #Calculette
	instanceVariableNames: ''etatCourant eta...etc...
		category: 	nil
		method: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a Nautilus
		window: 	a NautilusWindow(751304704)
		hierarchyClass: 	Calculette
		cachedHierarchy: 	an IdentityDictionary(Calculette->an OrderedCollection(' ' Cal...etc...
		sourceTextArea: 	a PluggableTextMorphWithLimits(640417792)
		firstColumn: 	a PanelMorph(936378368)
		secondColumn: 	a PanelMorph(631767040)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a RPackage(IN107)->true )
		classesSelection: 	a Dictionary(Calculette->true )
		list: 	a PluggableIconListMorph(972554240)
		list2: 	a PluggableIconListMorph(667942912)
		sourceCodePanel: 	a PanelMorph(470286336)
		commentTextArea: 	a PluggableTextMorph(1009516544)
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(136052736)
		list2Elements: 	{Calculette. Test}
		listElements: 	an Array(a RPackage(AST-Core) a RPackage(AST-Core-Matching) a RPa...etc...
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(640417792)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(970194944)
		contentSelection: 	nil
		categories: 	nil
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		methods: 	nil


[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
	Receiver: a PluggableTextMorphWithLimits(640417792)
	Arguments and temporary variables: 
		acceptedText: 	a Text for 'Object subclass: #Calculette
	instanceVariableNames: ...etc...
	Receiver's instance variables: 
		bounds: 	(128.0@352.0) corner: (944.0@629.0)
		owner: 	a MultipleMethodsEditor(970194944)
		submorphs: 	an Array(an AlphaImageMorph(423100416) a TransformMorph(983040000))
		fullBounds: 	(128@352) corner: (944@629)
		color: 	Color white
		extension: 	a MorphExtension (139722752) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(667418624)
		scroller: 	a TransformMorph(983040000)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(302514176)
		textMorph: 	a TextMorphForEditView(166985728)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(125 to: 124)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(423100416)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


BlockClosure>>ensure:
	Receiver: [^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perfo...etc...
	Arguments and temporary variables: 
		aBlock: 	[unstyledAcceptText := nil]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInMod...etc...
		startpc: 	65
		numArgs: 	0


PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
	Receiver: a PluggableTextMorphWithLimits(640417792)
	Arguments and temporary variables: 
		acceptedText: 	a Text for 'Object subclass: #Calculette
	instanceVariableNames: ...etc...
	Receiver's instance variables: 
		bounds: 	(128.0@352.0) corner: (944.0@629.0)
		owner: 	a MultipleMethodsEditor(970194944)
		submorphs: 	an Array(an AlphaImageMorph(423100416) a TransformMorph(983040000))
		fullBounds: 	(128@352) corner: (944@629)
		color: 	Color white
		extension: 	a MorphExtension (139722752) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(667418624)
		scroller: 	a TransformMorph(983040000)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(302514176)
		textMorph: 	a TextMorphForEditView(166985728)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(125 to: 124)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(423100416)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptBasic
	Receiver: a PluggableTextMorphWithLimits(640417792)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	(125 to: 124)
		saveScrollerOffset: 	(-3@0)
	Receiver's instance variables: 
		bounds: 	(128.0@352.0) corner: (944.0@629.0)
		owner: 	a MultipleMethodsEditor(970194944)
		submorphs: 	an Array(an AlphaImageMorph(423100416) a TransformMorph(983040000))
		fullBounds: 	(128@352) corner: (944@629)
		color: 	Color white
		extension: 	a MorphExtension (139722752) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(667418624)
		scroller: 	a TransformMorph(983040000)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(302514176)
		textMorph: 	a TextMorphForEditView(166985728)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(125 to: 124)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(423100416)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits>>acceptBasic
	Receiver: a PluggableTextMorphWithLimits(640417792)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	nil
		saveScrollerOffset: 	nil
	Receiver's instance variables: 
		bounds: 	(128.0@352.0) corner: (944.0@629.0)
		owner: 	a MultipleMethodsEditor(970194944)
		submorphs: 	an Array(an AlphaImageMorph(423100416) a TransformMorph(983040000))
		fullBounds: 	(128@352) corner: (944@629)
		color: 	Color white
		extension: 	a MorphExtension (139722752) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(667418624)
		scroller: 	a TransformMorph(983040000)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(302514176)
		textMorph: 	a TextMorphForEditView(166985728)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(125 to: 124)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(423100416)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>accept
	Receiver: a PluggableTextMorphWithLimits(640417792)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(128.0@352.0) corner: (944.0@629.0)
		owner: 	a MultipleMethodsEditor(970194944)
		submorphs: 	an Array(an AlphaImageMorph(423100416) a TransformMorph(983040000))
		fullBounds: 	(128@352) corner: (944@629)
		color: 	Color white
		extension: 	a MorphExtension (139722752) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(667418624)
		scroller: 	a TransformMorph(983040000)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(302514176)
		textMorph: 	a TextMorphForEditView(166985728)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(125 to: 124)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(423100416)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView>>acceptContents
	Receiver: a TextMorphForEditView(166985728)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (808@82)
		owner: 	a TransformMorph(983040000)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (808@82)
		color: 	Color black
		extension: 	a MorphExtension (211812352) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Object subclass: #Calculette
	instanceVariableNames: ''etatCo...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorphWithLimits(640417792)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[:morph | morph acceptContents] in TextMorph class>>buildTextEditorKeymapsOn:
	Receiver: TextMorph
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a TextMorphForEditView(166985728)
	Receiver's instance variables: 
		superclass: 	RectangleMorph
		methodDict: 	a MethodDictionary(size 203)
		format: 	166
		layout: 	nil
		instanceVariables: 	#('textStyle' 'text' 'wrapFlag' 'paragraph' 'editor' 'contai...etc...
		organization: 	a ClassOrganizer
		subclasses: 	{StringMorphEditor. TextMorphForEditView. GrowlMorph}
		name: 	#TextMorph
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Basic'
		traitComposition: 	TAbleToRotate
		localSelectors: 	a Set(#editorClass #setTextStyle: #setFirstCharacter: #margins:...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph acceptContents]
	Arguments and temporary variables: 
		anArg: 	a TextMorphForEditView(166985728)
	Receiver's instance variables: 
		outerContext: 	TextMorph class>>buildTextEditorKeymapsOn:
		startpc: 	88
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph acceptContents]
	Arguments and temporary variables: 
		firstArg: 	a TextMorphForEditView(166985728)
		secondArg: 	a TextMorphForEditView(166985728)
	Receiver's instance variables: 
		outerContext: 	TextMorph class>>buildTextEditorKeymapsOn:
		startpc: 	88
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph acceptContents]
	Arguments and temporary variables: 
		firstArg: 	a TextMorphForEditView(166985728)
		secondArg: 	a TextMorphForEditView(166985728)
		thirdArg: 	[keystroke '<Ctrl-s>']
	Receiver's instance variables: 
		outerContext: 	TextMorph class>>buildTextEditorKeymapsOn:
		startpc: 	88
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#TextMorph)
	Arguments and temporary variables: 
		aKeymap: 	#accept on Ctrl + S do [:morph | morph acceptContents]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
	Receiver's instance variables: 
		target: 	a TextMorphForEditView(166985728)
		category: 	a KMCategory
		morph: 	a TextMorphForEditView(166985728)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #accept on Ctrl + S do [:morph | morph acceptContents]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		listeners: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		l: 	aKMCategoryTarget(#TextMorph)
	Receiver's instance variables: 
		action: 	[:morph | morph acceptContents]
		name: 	#accept
		shortcut: 	Ctrl + S
		defaultShortcut: 	Ctrl + S
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #accept on Ctrl + S do [:morph | morph acceptContents]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		listeners: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph acceptContents]
		name: 	#accept
		shortcut: 	Ctrl + S
		defaultShortcut: 	Ctrl + S
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #accept on Ctrl + S do [:morph | morph acceptContents]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph acceptContents]
		name: 	#accept
		shortcut: 	Ctrl + S
		defaultShortcut: 	Ctrl + S
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#accept on Ctrl + S do [:morph | morph acceptContents]

	Receiver's instance variables: 
		name: 	#TextMorph
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#accept on Ctrl + S do [:morph | morph acceptContents]
)
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	4
		each: 	#accept on Ctrl + S do [:morph | morph acceptContents]

		indexLimiT: 	5
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil #accept on Ctrl + S do [:morph | morph acceptConten...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#TextMorph
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#TextMorph)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a TextMorphForEditView(166985728)
		category: 	a KMCategory
		morph: 	a TextMorphForEditView(166985728)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#TextMorph)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(166985728)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	4


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(166985728)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TextMorphForEditView(166985728)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil



--- The full stack ---
ClassBuilder(Object)>>error:
ClassBuilder>>validateClassvars:from:forSuper:
[| newCategory oldCategory needNew force organization |
unsafe
		ifFalse: [(self validateSuperclass: newSuper forSubclass: oldClass)
				ifFalse: [^ nil].
			(self
					validateInstvars: instVars
					from: oldClass
					forSuper: newSuper)
				ifFalse: [^ nil].
			(self
					validateClassvars: classVars
					from: oldClass
					forSuper: newSuper)
				ifFalse: [^ nil].
			(self
					validateSubclassFormat: type
					from: oldClass
					forSuper: newSuper
					extra: instVars size)
				ifFalse: [^ nil]].
	needNew := self
				needsSubclassOf: newSuper
				type: type
				instanceVariables: instVars
				from: oldClass.
	needNew
		ifNil: [^ nil].
	(needNew
			and: [unsafe not])
		ifTrue: [(self tooDangerousClasses includes: oldClass name)
				ifTrue: [self error: oldClass name , ' cannot be changed'].
			(oldClass ~~ nil
					and: [oldClass shouldNotBeRedefined])
				ifTrue: [self notify: oldClass name asText allBold , ' should not be redefined. \Proceed to store over it.' withCRs]].
	needNew
		ifTrue: [newClass := self
						newSubclassOf: newSuper
						type: type
						instanceVariables: instVars
						from: oldClass.
			newClass
				ifNil: [^ nil].
			newClass setName: className]
		ifFalse: [newClass := oldClass].
	force := (newClass declare: classVarString)
				| (newClass sharing: poolString).
	newCategory := category asSymbol.
	organization := environ
				ifNotNil: [environ organization].
	oldClass isNil
		ifFalse: [oldCategory := (organization categoryOfElement: oldClass name) asSymbol].
	organization classify: newClass name under: newCategory.
	newClass environment: environ.
	newClass := self
				recompile: force
				from: oldClass
				to: newClass
				mutate: false.
	(environ
			at: newClass name
			ifAbsent: [])
			== newClass
		ifFalse: [environ at: newClass name put: newClass.
			Smalltalk globals flushClassNameCache].
	copyOfOldTraitComposition
		ifNotNil: [newClass setTraitComposition: copyOfOldTraitComposition].
	copyOfOldClassTraitComposition
		ifNotNil: [newClass class setTraitComposition: copyOfOldClassTraitComposition].
	newClass doneCompiling.
	oldClass isNil
		ifTrue: [SystemAnnouncer uniqueInstance classAdded: newClass inCategory: newCategory.
			^ newClass].
	newCategory ~= oldCategory
		ifTrue: [SystemAnnouncer uniqueInstance
				class: newClass
				recategorizedFrom: oldCategory
				to: category]
		ifFalse: [SystemAnnouncer uniqueInstance classDefinitionChangedFrom: copyOfOldClass to: newClass]] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
BlockClosure>>ensure:
ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
ClassBuilder>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
Object class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
Compiler class>>evaluate:for:notifying:logged:
Compiler class>>evaluate:notifying:logged:
NautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
NautilusUI(AbstractNautilusUI)>>compileAClassFrom:notifying:
NautilusUI>>compileSource:notifying:
[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
BlockClosure>>ensure:
PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptBasic
PluggableTextMorphWithLimits>>acceptBasic
PluggableTextMorphWithLimits(PluggableTextMorph)>>accept
TextMorphForEditView>>acceptContents
[:morph | morph acceptContents] in TextMorph class>>buildTextEditorKeymapsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Test class>>exemple
10 December 2013 10:32:20.15 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

Test class(Object)>>doesNotUnderstand: #exemple
	Receiver: Test
	Arguments and temporary variables: 
		aMessage: 	exemple
		exception: 	MessageNotUnderstood: Test class>>exemple
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#decr->Test>>#decr #exemple->Test>>#exemple #inc...etc...
		format: 	134
		layout: 	nil
		instanceVariables: 	#('value' 'c')
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#Test
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#IN107
		traitComposition: 	{}
		localSelectors: 	nil
		c: 	a Test


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(280756224)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ Test exemple
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(280756224)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | 
printString := [result printString]
				on: Error
				do: [...etc...
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(280756224)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | 
printString := [result printString]
				on: Error
				do: [...etc...
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(280756224)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result | 
			printString := [result printString]
						on: Error
						do: ['<error in printString: try ''Inspect it'' to debug>'].
			selectionInterval := oldEditor selectionInterval.
			textMorph installEditorToReplace: oldEditor.
			textMorph
				handleEdit: [oldEditor afterSelectionInsertAndSelect: printString].
			selectionInterval := oldEditor selectionInterval.
			textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
			self scrollSelectionIntoView]] in PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(82051072)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(84.0@329.0) corner: (524.0@496.0)
		owner: 	a SystemWindow(499908608)
		submorphs: 	an Array(a TransformMorph(483655680))
		fullBounds: 	(84@329) corner: (524@496)
		color: 	Color white
		extension: 	a MorphExtension (259522560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(107216896)
		scroller: 	a TransformMorph(483655680)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(852754432)
		textMorph: 	a TextMorphForEditView(280756224)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 12)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(280756224)
	Arguments and temporary variables: 
		editBlock: 	[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result ...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(483655680)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (313524224) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Test exemple'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(82051072)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(82051072)
	Arguments and temporary variables: 
		oldEditor: 	a SmalltalkEditor
		printString: 	nil
	Receiver's instance variables: 
		bounds: 	(84.0@329.0) corner: (524.0@496.0)
		owner: 	a SystemWindow(499908608)
		submorphs: 	an Array(a TransformMorph(483655680))
		fullBounds: 	(84@329) corner: (524@496)
		color: 	Color white
		extension: 	a MorphExtension (259522560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(107216896)
		scroller: 	a TransformMorph(483655680)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(852754432)
		textMorph: 	a TextMorphForEditView(280756224)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 12)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


Workspace(Object)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#printIt
		otherTarget: 	a PluggableTextMorph(82051072)
	Receiver's instance variables: 
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true
		contents: 	a Text for 'Test exemple'


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(187695104)'Print it'
	Arguments and temporary variables: 
		evt: 	[(311@342) mouseUp 1688257 nil]
		w: 	a PasteUpMorph(425197568) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(270.0@328.0) corner: (413.0@346.0)
		owner: 	a MenuMorph(92274688)
		submorphs: 	#()
		fullBounds: 	(270.0@328.0) corner: (413.0@346.0)
		color: 	Color black
		extension: 	a MorphExtension (265289728) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(82051072))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'p'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(187695104)'Print it'
	Arguments and temporary variables: 
		evt: 	[(311@342) mouseUp 1688257 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(270.0@328.0) corner: (413.0@346.0)
		owner: 	a MenuMorph(92274688)
		submorphs: 	#()
		fullBounds: 	(270.0@328.0) corner: (413.0@346.0)
		color: 	Color black
		extension: 	a MorphExtension (265289728) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(82051072))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'p'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(187695104)'Print it'
	Arguments and temporary variables: 
		evt: 	[(311@342) mouseUp 1688257 nil]
	Receiver's instance variables: 
		bounds: 	(270.0@328.0) corner: (413.0@346.0)
		owner: 	a MenuMorph(92274688)
		submorphs: 	#()
		fullBounds: 	(270.0@328.0) corner: (413.0@346.0)
		color: 	Color black
		extension: 	a MorphExtension (265289728) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(82051072))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'p'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(187695104)'Print it'
	Arguments and temporary variables: 
		anEvent: 	[(311@342) mouseUp 1688257 nil]
	Receiver's instance variables: 
		bounds: 	(270.0@328.0) corner: (413.0@346.0)
		owner: 	a MenuMorph(92274688)
		submorphs: 	#()
		fullBounds: 	(270.0@328.0) corner: (413.0@346.0)
		color: 	Color black
		extension: 	a MorphExtension (265289728) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(82051072))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'p'


MouseButtonEvent>>sentTo:
	Receiver: [(311@342) mouseUp 1688257 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(187695104)'Print it'
	Receiver's instance variables: 
		timeStamp: 	1688257
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(311@342)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(187695104)'Print it'
	Arguments and temporary variables: 
		anEvent: 	[(311@342) mouseUp 1688257 nil]
	Receiver's instance variables: 
		bounds: 	(270.0@328.0) corner: (413.0@346.0)
		owner: 	a MenuMorph(92274688)
		submorphs: 	#()
		fullBounds: 	(270.0@328.0) corner: (413.0@346.0)
		color: 	Color black
		extension: 	a MorphExtension (265289728) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(82051072))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'p'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(311@342) mouseUp 1688257 nil]
		aMorph: 	a ToggleMenuItemMorph(187695104)'Print it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(311@342) mouseUp 1688257 nil]
		aMorph: 	a ToggleMenuItemMorph(187695104)'Print it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(187695104)'Print it'
	Arguments and temporary variables: 
		anEvent: 	[(311@342) mouseUp 1688257 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(270.0@328.0) corner: (413.0@346.0)
		owner: 	a MenuMorph(92274688)
		submorphs: 	#()
		fullBounds: 	(270.0@328.0) corner: (413.0@346.0)
		color: 	Color black
		extension: 	a MorphExtension (265289728) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#printIt a PluggableTextMorph(82051072))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'p'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(311@342) mouseUp 1688257 nil]
		aMorph: 	a MenuMorph(92274688)
		localEvt: 	[(311@342) mouseUp 1688257 nil]
		index: 	2
		child: 	a ToggleMenuItemMorph(187695104)'Print it'
		morphs: 	an Array(a ToggleMenuItemMorph(919076864)'Do it' a ToggleMenuItemMorph(...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(311@342) mouseUp 1688257 nil]
		aMorph: 	a MenuMorph(92274688)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(92274688)
	Arguments and temporary variables: 
		anEvent: 	[(311@342) mouseUp 1688257 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(265.0@304.0) corner: (418.0@644.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(919076864)'Do it' a ToggleMenuItemMor...etc...
		fullBounds: 	(265.0@304.0) corner: (418.0@644.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (119275520) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(187695104)'Print it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(919076864)'Do it' a Toggl...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(92274688)
	Arguments and temporary variables: 
		anEvent: 	[(311@342) mouseUp 1688257 nil]
	Receiver's instance variables: 
		bounds: 	(265.0@304.0) corner: (418.0@644.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(919076864)'Do it' a ToggleMenuItemMor...etc...
		fullBounds: 	(265.0@304.0) corner: (418.0@644.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (119275520) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(187695104)'Print it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(919076864)'Do it' a Toggl...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(92274688)
	Arguments and temporary variables: 
		evt: 	[(311@342) mouseUp 1688257 nil]
	Receiver's instance variables: 
		bounds: 	(265.0@304.0) corner: (418.0@644.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(919076864)'Do it' a ToggleMenuItemMor...etc...
		fullBounds: 	(265.0@304.0) corner: (418.0@644.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (119275520) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(187695104)'Print it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(919076864)'Do it' a Toggl...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(311@342) mouseUp 1688257 nil]
		focusHolder: 	a MenuMorph(92274688)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(309@351) corner: (325@367)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(309@351) corner: (325@367)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(309@351) mouseOver nil nil]
		targetOffset: 	(41.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1688565 309 348 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(311@342) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (973@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(499908608) a Syste...etc...
		fullBounds: 	(0@0) corner: (973@662)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(311@342) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (973@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(499908608) a Syste...etc...
		fullBounds: 	(0@0) corner: (973@662)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(311@342) mouseUp 1688257 nil]
		focusHolder: 	a MenuMorph(92274688)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(304@365) corner: (320@381)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(304@365) corner: (320@381)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(304@365) mouseOver nil nil]
		targetOffset: 	(41.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1688629 305 361 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(311@342) mouseUp 1688257 nil]
		focusHolder: 	a MenuMorph(92274688)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(304@365) corner: (320@381)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(304@365) corner: (320@381)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(304@365) mouseOver nil nil]
		targetOffset: 	(41.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1688629 305 361 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(311@342) mouseUp 1688257 nil]
	Receiver's instance variables: 
		bounds: 	(304@365) corner: (320@381)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(304@365) corner: (320@381)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(304@365) mouseOver nil nil]
		targetOffset: 	(41.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1688629 305 361 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(311@342) mouseUp 1688257 nil]
		evt: 	[(311@342) mouseUp 1688257 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(304@368) corner: (320@384)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(304@368) corner: (320@384)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(304@368) mouseOver nil nil]
		targetOffset: 	(41.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1688649 304 366 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(311@342) mouseUp 1688257 nil]
		evtBuf: 	#(1 1688257 311 342 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(303@372) corner: (319@388)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(303@372) corner: (319@388)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(303@372) mouseOver nil nil]
		targetOffset: 	(41.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1688671 304 369 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (973@662)
		canvas: 	a FormCanvas on: DisplayScreen(973x662x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(105906176))(a DropList...etc...
		lastStepTime: 	1688671
		lastStepMessage: 	nil
		lastCycleTime: 	1688671
		alarms: 	a Heap()
		lastAlarmTime: 	1688671
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (973@662)
		canvas: 	a FormCanvas on: DisplayScreen(973x662x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(105906176))(a DropList...etc...
		lastStepTime: 	1688691
		lastStepMessage: 	nil
		lastCycleTime: 	1688691
		alarms: 	a Heap()
		lastAlarmTime: 	1688691
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (973@662)
		canvas: 	a FormCanvas on: DisplayScreen(973x662x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(105906176))(a DropList...etc...
		lastStepTime: 	1688691
		lastStepMessage: 	nil
		lastCycleTime: 	1688691
		alarms: 	a Heap()
		lastAlarmTime: 	1688691
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
Test class(Object)>>doesNotUnderstand: #exemple
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result | 
			printString := [result printString]
						on: Error
						do: ['<error in printString: try ''Inspect it'' to debug>'].
			selectionInterval := oldEditor selectionInterval.
			textMorph installEditorToReplace: oldEditor.
			textMorph
				handleEdit: [oldEditor afterSelectionInsertAndSelect: printString].
			selectionInterval := oldEditor selectionInterval.
			textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
			self scrollSelectionIntoView]] in PluggableTextMorph>>printIt
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>printIt
Workspace(Object)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[:menu | 
menu setInvokingView: self.
	menu invokeModal.
	^ true] in PluggableTextMorph>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
PluggableTextMorph>>yellowButtonActivity:
PluggableTextMorph(ScrollPane)>>mouseDown:
PluggableTextMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
PluggableTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Test class>>exemple
10 December 2013 10:32:23.736 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

Test class(Object)>>doesNotUnderstand: #exemple
	Receiver: Test
	Arguments and temporary variables: 
		aMessage: 	exemple
		exception: 	MessageNotUnderstood: Test class>>exemple
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#decr->Test>>#decr #exemple->Test>>#exemple #inc...etc...
		format: 	134
		layout: 	nil
		instanceVariables: 	#('value' 'c')
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#Test
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#IN107
		traitComposition: 	{}
		localSelectors: 	nil
		c: 	a Test


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(280756224)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ Test exemple
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(280756224)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(280756224)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(280756224)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(280756224)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(82051072)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(84.0@329.0) corner: (524.0@496.0)
		owner: 	a SystemWindow(499908608)
		submorphs: 	an Array(a TransformMorph(483655680))
		fullBounds: 	(84@329) corner: (524@496)
		color: 	Color white
		extension: 	a MorphExtension (259522560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(107216896)
		scroller: 	a TransformMorph(483655680)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(852754432)
		textMorph: 	a TextMorphForEditView(280756224)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 12)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(82051072)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(84.0@329.0) corner: (524.0@496.0)
		owner: 	a SystemWindow(499908608)
		submorphs: 	an Array(a TransformMorph(483655680))
		fullBounds: 	(84@329) corner: (524@496)
		color: 	Color white
		extension: 	a MorphExtension (259522560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(107216896)
		scroller: 	a TransformMorph(483655680)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(852754432)
		textMorph: 	a TextMorphForEditView(280756224)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 12)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(280756224)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(483655680)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (313524224) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Test exemple'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(82051072)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(82051072)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(84.0@329.0) corner: (524.0@496.0)
		owner: 	a SystemWindow(499908608)
		submorphs: 	an Array(a TransformMorph(483655680))
		fullBounds: 	(84@329) corner: (524@496)
		color: 	Color white
		extension: 	a MorphExtension (259522560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(107216896)
		scroller: 	a TransformMorph(483655680)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(852754432)
		textMorph: 	a TextMorphForEditView(280756224)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 12)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(82051072)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(84.0@329.0) corner: (524.0@496.0)
		owner: 	a SystemWindow(499908608)
		submorphs: 	an Array(a TransformMorph(483655680))
		fullBounds: 	(84@329) corner: (524@496)
		color: 	Color white
		extension: 	a MorphExtension (259522560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(107216896)
		scroller: 	a TransformMorph(483655680)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(852754432)
		textMorph: 	a TextMorphForEditView(280756224)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 12)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


Workspace(Object)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(82051072)
	Receiver's instance variables: 
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true
		contents: 	a Text for 'Test exemple'


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(899153920)'Do it'
	Arguments and temporary variables: 
		evt: 	[(308@316) mouseUp 1691841 nil]
		w: 	a PasteUpMorph(425197568) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(261.0@309.0) corner: (404.0@327.0)
		owner: 	a MenuMorph(431489024)
		submorphs: 	#()
		fullBounds: 	(261.0@309.0) corner: (404.0@327.0)
		color: 	Color black
		extension: 	a MorphExtension (976748544) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(82051072))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(899153920)'Do it'
	Arguments and temporary variables: 
		evt: 	[(308@316) mouseUp 1691841 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(261.0@309.0) corner: (404.0@327.0)
		owner: 	a MenuMorph(431489024)
		submorphs: 	#()
		fullBounds: 	(261.0@309.0) corner: (404.0@327.0)
		color: 	Color black
		extension: 	a MorphExtension (976748544) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(82051072))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(899153920)'Do it'
	Arguments and temporary variables: 
		evt: 	[(308@316) mouseUp 1691841 nil]
	Receiver's instance variables: 
		bounds: 	(261.0@309.0) corner: (404.0@327.0)
		owner: 	a MenuMorph(431489024)
		submorphs: 	#()
		fullBounds: 	(261.0@309.0) corner: (404.0@327.0)
		color: 	Color black
		extension: 	a MorphExtension (976748544) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(82051072))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(899153920)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(308@316) mouseUp 1691841 nil]
	Receiver's instance variables: 
		bounds: 	(261.0@309.0) corner: (404.0@327.0)
		owner: 	a MenuMorph(431489024)
		submorphs: 	#()
		fullBounds: 	(261.0@309.0) corner: (404.0@327.0)
		color: 	Color black
		extension: 	a MorphExtension (976748544) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(82051072))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MouseButtonEvent>>sentTo:
	Receiver: [(308@316) mouseUp 1691841 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(899153920)'Do it'
	Receiver's instance variables: 
		timeStamp: 	1691841
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(308@316)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(899153920)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(308@316) mouseUp 1691841 nil]
	Receiver's instance variables: 
		bounds: 	(261.0@309.0) corner: (404.0@327.0)
		owner: 	a MenuMorph(431489024)
		submorphs: 	#()
		fullBounds: 	(261.0@309.0) corner: (404.0@327.0)
		color: 	Color black
		extension: 	a MorphExtension (976748544) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(82051072))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(308@316) mouseUp 1691841 nil]
		aMorph: 	a ToggleMenuItemMorph(899153920)'Do it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(308@316) mouseUp 1691841 nil]
		aMorph: 	a ToggleMenuItemMorph(899153920)'Do it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(899153920)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(308@316) mouseUp 1691841 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(261.0@309.0) corner: (404.0@327.0)
		owner: 	a MenuMorph(431489024)
		submorphs: 	#()
		fullBounds: 	(261.0@309.0) corner: (404.0@327.0)
		color: 	Color black
		extension: 	a MorphExtension (976748544) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(82051072))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(308@316) mouseUp 1691841 nil]
		aMorph: 	a MenuMorph(431489024)
		localEvt: 	[(308@316) mouseUp 1691841 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(899153920)'Do it'
		morphs: 	an Array(a ToggleMenuItemMorph(899153920)'Do it' a ToggleMenuItemMorph(...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(308@316) mouseUp 1691841 nil]
		aMorph: 	a MenuMorph(431489024)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(431489024)
	Arguments and temporary variables: 
		anEvent: 	[(308@316) mouseUp 1691841 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(256.0@304.0) corner: (409.0@644.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(899153920)'Do it' a ToggleMenuItemMor...etc...
		fullBounds: 	(256.0@304.0) corner: (409.0@644.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (458489856) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(899153920)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(899153920)'Do it' a Toggl...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(431489024)
	Arguments and temporary variables: 
		anEvent: 	[(308@316) mouseUp 1691841 nil]
	Receiver's instance variables: 
		bounds: 	(256.0@304.0) corner: (409.0@644.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(899153920)'Do it' a ToggleMenuItemMor...etc...
		fullBounds: 	(256.0@304.0) corner: (409.0@644.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (458489856) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(899153920)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(899153920)'Do it' a Toggl...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(431489024)
	Arguments and temporary variables: 
		evt: 	[(308@316) mouseUp 1691841 nil]
	Receiver's instance variables: 
		bounds: 	(256.0@304.0) corner: (409.0@644.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(899153920)'Do it' a ToggleMenuItemMor...etc...
		fullBounds: 	(256.0@304.0) corner: (409.0@644.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (458489856) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(899153920)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(899153920)'Do it' a Toggl...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(308@316) mouseUp 1691841 nil]
		focusHolder: 	a MenuMorph(431489024)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(308@316) corner: (324@332)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(308@316) corner: (324@332)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(308@316) mouseUp 1691841 nil]
		targetOffset: 	(47.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1691841 308 316 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(308@316) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (973@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(499908608) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(308@316) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (973@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(499908608) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(308@316) mouseUp 1691841 nil]
		focusHolder: 	a MenuMorph(431489024)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(308@316) corner: (324@332)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(308@316) corner: (324@332)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(308@316) mouseUp 1691841 nil]
		targetOffset: 	(47.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1691841 308 316 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(308@316) mouseUp 1691841 nil]
		focusHolder: 	a MenuMorph(431489024)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(308@316) corner: (324@332)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(308@316) corner: (324@332)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(308@316) mouseUp 1691841 nil]
		targetOffset: 	(47.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1691841 308 316 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(308@316) mouseUp 1691841 nil]
	Receiver's instance variables: 
		bounds: 	(308@316) corner: (324@332)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(308@316) corner: (324@332)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(308@316) mouseUp 1691841 nil]
		targetOffset: 	(47.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1691841 308 316 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(308@316) mouseUp 1691841 nil]
		evt: 	[(308@316) mouseUp 1691841 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(308@316) corner: (324@332)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(308@316) corner: (324@332)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(308@316) mouseUp 1691841 nil]
		targetOffset: 	(47.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1691841 308 316 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(308@316) mouseUp 1691841 nil]
		evtBuf: 	#(1 1691841 308 316 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(308@316) corner: (324@332)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(308@316) corner: (324@332)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(308@316) mouseUp 1691841 nil]
		targetOffset: 	(47.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1691841 308 316 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (973@662)
		canvas: 	a FormCanvas on: DisplayScreen(973x662x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(322961408))(a DropList...etc...
		lastStepTime: 	1691835
		lastStepMessage: 	nil
		lastCycleTime: 	1691857
		alarms: 	a Heap()
		lastAlarmTime: 	1691835
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
Test class(Object)>>doesNotUnderstand: #exemple
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(Object)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[:menu | 
menu setInvokingView: self.
	menu invokeModal.
	^ true] in PluggableTextMorph>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
PluggableTextMorph>>yellowButtonActivity:
PluggableTextMorph(ScrollPane)>>mouseDown:
PluggableTextMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
PluggableTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "includesKey:" is nil
10 December 2013 10:34:53.526 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

UndefinedObject(Object)>>doesNotUnderstand: #includesKey:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	includesKey: #SHPreferences
		exception: 	MessageNotUnderstood: receiver of "includesKey:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

PluggableTextMorph class>>shoutEnabled
	Receiver: PluggableTextMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	ScrollPane
		methodDict: 	a MethodDictionary(size 169)
		format: 	208
		layout: 	nil
		instanceVariables: 	#('textMorph' 'getTextSelector' 'setTextSelector' 'getSelect...etc...
		organization: 	a ClassOrganizer
		subclasses: 	{BrowserCommentTextMorph. PluggableTextEditorMorph. PluggableTextFi...etc...
		name: 	#PluggableTextMorph
		classPool: 	a Dictionary(#ShowTextEditingState->true #StylingClass->SHTextStyler...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Pluggable Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


PluggableTextMorph>>shoutEnabled
	Receiver: a PluggableTextMorph(942931968)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(352.0@203.0) corner: (553.0@393.0)
		owner: 	a SystemWindow(656408576)
		submorphs: 	an Array(a TransformMorph(799277056))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (639369216) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	an Inspector
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(956039168)
		scroller: 	a TransformMorph(799277056)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(347865088)
		textMorph: 	a TextMorphForEditView(660602880)
		getTextSelector: 	#contents
		setTextSelector: 	#accept:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>okToStyle
	Receiver: a PluggableTextMorph(942931968)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(352.0@203.0) corner: (553.0@393.0)
		owner: 	a SystemWindow(656408576)
		submorphs: 	an Array(a TransformMorph(799277056))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (639369216) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	an Inspector
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(956039168)
		scroller: 	a TransformMorph(799277056)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(347865088)
		textMorph: 	a TextMorphForEditView(660602880)
		getTextSelector: 	#contents
		setTextSelector: 	#accept:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>setText:
	Receiver: a PluggableTextMorph(942931968)
	Arguments and temporary variables: 
		aText: 	'a SystemDictionary(lots of globals)'
	Receiver's instance variables: 
		bounds: 	(352.0@203.0) corner: (553.0@393.0)
		owner: 	a SystemWindow(656408576)
		submorphs: 	an Array(a TransformMorph(799277056))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (639369216) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	an Inspector
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(956039168)
		scroller: 	a TransformMorph(799277056)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(347865088)
		textMorph: 	a TextMorphForEditView(660602880)
		getTextSelector: 	#contents
		setTextSelector: 	#accept:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>update:
	Receiver: a PluggableTextMorph(942931968)
	Arguments and temporary variables: 
		aSymbol: 	#contents
	Receiver's instance variables: 
		bounds: 	(352.0@203.0) corner: (553.0@393.0)
		owner: 	a SystemWindow(656408576)
		submorphs: 	an Array(a TransformMorph(799277056))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (639369216) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	an Inspector
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(956039168)
		scroller: 	a TransformMorph(799277056)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(347865088)
		textMorph: 	a TextMorphForEditView(660602880)
		getTextSelector: 	#contents
		setTextSelector: 	#accept:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:aDependent | aDependent update: aParameter] in Inspector(Object)>>changed:
	Receiver: an Inspector
	Arguments and temporary variables: 
		aParameter: 	#contents
		aDependent: 	a PluggableTextMorph(942931968)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(656408576) a PluggableListMorph(82...etc...
		contents: 	'a SystemDictionary(lots of globals)'
		object: 	Smalltalk
		selectionIndex: 	3
		timeOfLastListUpdate: 	1835323
		selectionUpdateTime: 	0


DependentsArray>>do:
	Receiver: a DependentsArray(a SystemWindow(656408576) a PluggableListMorph(825753600) a PluggableTex...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aDependent | aDependent update: aParameter]
		dep: 	a PluggableTextMorph(942931968)
		i: 	3
		iLimiT: 	4
	Receiver's instance variables: 
a DependentsArray(a SystemWindow(656408576) a PluggableListMorph(825753600) a PluggableTex...etc...

Inspector(Object)>>changed:
	Receiver: an Inspector
	Arguments and temporary variables: 
		aParameter: 	#contents
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(656408576) a PluggableListMorph(82...etc...
		contents: 	'a SystemDictionary(lots of globals)'
		object: 	Smalltalk
		selectionIndex: 	3
		timeOfLastListUpdate: 	1835323
		selectionUpdateTime: 	0


Inspector>>accept:
	Receiver: an Inspector
	Arguments and temporary variables: 
		aString: 	a Text for ''
		result: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(656408576) a PluggableListMorph(82...etc...
		contents: 	'a SystemDictionary(lots of globals)'
		object: 	Smalltalk
		selectionIndex: 	3
		timeOfLastListUpdate: 	1835323
		selectionUpdateTime: 	0


[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in PluggableTextMorph>>acceptTextInModel
	Receiver: a PluggableTextMorph(942931968)
	Arguments and temporary variables: 
		acceptedText: 	a Text for ''
	Receiver's instance variables: 
		bounds: 	(352.0@203.0) corner: (553.0@393.0)
		owner: 	a SystemWindow(656408576)
		submorphs: 	an Array(a TransformMorph(799277056))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (639369216) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	an Inspector
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(956039168)
		scroller: 	a TransformMorph(799277056)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(347865088)
		textMorph: 	a TextMorphForEditView(660602880)
		getTextSelector: 	#contents
		setTextSelector: 	#accept:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


BlockClosure>>ensure:
	Receiver: [^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perfo...etc...
	Arguments and temporary variables: 
		aBlock: 	[unstyledAcceptText := nil]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PluggableTextMorph>>acceptTextInModel
		startpc: 	65
		numArgs: 	0


PluggableTextMorph>>acceptTextInModel
	Receiver: a PluggableTextMorph(942931968)
	Arguments and temporary variables: 
		acceptedText: 	a Text for ''
	Receiver's instance variables: 
		bounds: 	(352.0@203.0) corner: (553.0@393.0)
		owner: 	a SystemWindow(656408576)
		submorphs: 	an Array(a TransformMorph(799277056))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (639369216) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	an Inspector
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(956039168)
		scroller: 	a TransformMorph(799277056)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(347865088)
		textMorph: 	a TextMorphForEditView(660602880)
		getTextSelector: 	#contents
		setTextSelector: 	#accept:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>acceptBasic
	Receiver: a PluggableTextMorph(942931968)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	(1 to: 0)
		saveScrollerOffset: 	(-3@0)
	Receiver's instance variables: 
		bounds: 	(352.0@203.0) corner: (553.0@393.0)
		owner: 	a SystemWindow(656408576)
		submorphs: 	an Array(a TransformMorph(799277056))
		fullBounds: 	(352@203) corner: (553@393)
		color: 	Color white
		extension: 	a MorphExtension (639369216) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	an Inspector
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(956039168)
		scroller: 	a TransformMorph(799277056)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(347865088)
		textMorph: 	a TextMorphForEditView(660602880)
		getTextSelector: 	#contents
		setTextSelector: 	#accept:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>accept
	Receiver: a PluggableTextMorph(942931968)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(352.0@203.0) corner: (553.0@393.0)
		owner: 	a SystemWindow(656408576)
		submorphs: 	an Array(a TransformMorph(799277056))
		fullBounds: 	(352@203) corner: (553@393)
		color: 	Color white
		extension: 	a MorphExtension (639369216) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	an Inspector
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(956039168)
		scroller: 	a TransformMorph(799277056)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(347865088)
		textMorph: 	a TextMorphForEditView(660602880)
		getTextSelector: 	#contents
		setTextSelector: 	#accept:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView>>acceptContents
	Receiver: a TextMorphForEditView(660602880)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (193@14)
		owner: 	a TransformMorph(799277056)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (193@14)
		color: 	Color black
		extension: 	a MorphExtension (687341568) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(942931968)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[:morph | morph acceptContents] in TextMorph class>>buildTextEditorKeymapsOn:
	Receiver: TextMorph
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a TextMorphForEditView(660602880)
	Receiver's instance variables: 
		superclass: 	RectangleMorph
		methodDict: 	a MethodDictionary(size 203)
		format: 	166
		layout: 	nil
		instanceVariables: 	#('textStyle' 'text' 'wrapFlag' 'paragraph' 'editor' 'contai...etc...
		organization: 	a ClassOrganizer
		subclasses: 	<<error during printing>>

BlockClosure>>cull:
	Receiver: [:morph | morph acceptContents]
	Arguments and temporary variables: 
		anArg: 	a TextMorphForEditView(660602880)
	Receiver's instance variables: 
		outerContext: 	TextMorph class>>buildTextEditorKeymapsOn:
		startpc: 	88
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph acceptContents]
	Arguments and temporary variables: 
		firstArg: 	a TextMorphForEditView(660602880)
		secondArg: 	a TextMorphForEditView(660602880)
	Receiver's instance variables: 
		outerContext: 	TextMorph class>>buildTextEditorKeymapsOn:
		startpc: 	88
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph acceptContents]
	Arguments and temporary variables: 
		firstArg: 	a TextMorphForEditView(660602880)
		secondArg: 	a TextMorphForEditView(660602880)
		thirdArg: 	[keystroke '<Ctrl-s>']
	Receiver's instance variables: 
		outerContext: 	TextMorph class>>buildTextEditorKeymapsOn:
		startpc: 	88
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#TextMorph)
	Arguments and temporary variables: 
		aKeymap: 	#accept on Ctrl + S do [:morph | morph acceptContents]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
	Receiver's instance variables: 
		target: 	a TextMorphForEditView(660602880)
		category: 	a KMCategory
		morph: 	a TextMorphForEditView(660602880)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #accept on Ctrl + S do [:morph | morph acceptContents]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		listeners: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		l: 	aKMCategoryTarget(#TextMorph)
	Receiver's instance variables: 
		action: 	[:morph | morph acceptContents]
		name: 	#accept
		shortcut: 	Ctrl + S
		defaultShortcut: 	Ctrl + S
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #accept on Ctrl + S do [:morph | morph acceptContents]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		listeners: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph acceptContents]
		name: 	#accept
		shortcut: 	Ctrl + S
		defaultShortcut: 	Ctrl + S
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #accept on Ctrl + S do [:morph | morph acceptContents]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph acceptContents]
		name: 	#accept
		shortcut: 	Ctrl + S
		defaultShortcut: 	Ctrl + S
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#accept on Ctrl + S do [:morph | morph acceptContents]

	Receiver's instance variables: 
		name: 	#TextMorph
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#accept on Ctrl + S do [:morph | morph acceptContents]
)
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	4
		each: 	#accept on Ctrl + S do [:morph | morph acceptContents]

		indexLimiT: 	5
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil #accept on Ctrl + S do [:morph | morph acceptConten...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#TextMorph
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#TextMorph)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a TextMorphForEditView(660602880)
		category: 	a KMCategory
		morph: 	a TextMorphForEditView(660602880)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#TextMorph)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(660602880)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	4


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(660602880)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TextMorphForEditView(660602880)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-s>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(660602880)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(660602880)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-s>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (193@14)
		owner: 	a TransformMorph(799277056)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (193@14)
		color: 	Color black
		extension: 	a MorphExtension (687341568) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(942931968)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(660602880)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-s>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (193@14)
		owner: 	a TransformMorph(799277056)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (193@14)
		color: 	Color black
		extension: 	a MorphExtension (687341568) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(942931968)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-s>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(660602880)
	Receiver's instance variables: 
		timeStamp: 	1841645
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(72@72)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	19
		charCode: 	115
		scanCode: 	19


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(660602880)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-s>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (193@14)
		owner: 	a TransformMorph(799277056)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (193@14)
		color: 	Color black
		extension: 	a MorphExtension (687341568) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(942931968)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(660602880)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-s>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (193@14)
		owner: 	a TransformMorph(799277056)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (193@14)
		color: 	Color black
		extension: 	a MorphExtension (687341568) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for ''
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(942931968)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #includesKey:
PluggableTextMorph class>>shoutEnabled
PluggableTextMorph>>shoutEnabled
PluggableTextMorph>>okToStyle
PluggableTextMorph>>setText:
PluggableTextMorph>>update:
[:aDependent | aDependent update: aParameter] in Inspector(Object)>>changed:
DependentsArray>>do:
Inspector(Object)>>changed:
Inspector>>accept:
[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in PluggableTextMorph>>acceptTextInModel
BlockClosure>>ensure:
PluggableTextMorph>>acceptTextInModel
PluggableTextMorph>>acceptBasic
PluggableTextMorph>>accept
TextMorphForEditView>>acceptContents
[:morph | morph acceptContents] in TextMorph class>>buildTextEditorKeymapsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: EtatCalculette is multiply defined
10 December 2013 10:43:38.856 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

ClassBuilder(Object)>>error:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		aString: 	'EtatCalculette is multiply defined'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>validateClassvars:from:forSuper:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		classVarArray: 	#(#EtatCalculette #EtatCalculette #String #double)
		oldClass: 	Calculette
		newSuper: 	Object
		classVars: 	nil
		usedNames: 	a Set()
		temp: 	#EtatCalculette
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


[| newCategory oldCategory needNew force organization |
unsafe
		ifFalse: [(self validateSuperclass: newSuper forSubclass: oldClass)
				ifFalse: [^ nil].
			(self
					validateInstvars: instVars
					from: oldClass
					forSuper: newSuper)
				ifFalse: [^ nil].
			(self
					validateClassvars: classVars
					from: oldClass
					forSuper: newSuper)
				ifFalse: [^ nil].
			(self
					validateSubclassFormat: type
					from: oldClass
					forSuper: newSuper
					extra: instVars size)
				ifFalse: [^ nil]].
	needNew := self
				needsSubclassOf: newSuper
				type: type
				instanceVariables: instVars
				from: oldClass.
	needNew
		ifNil: [^ nil].
	(needNew
			and: [unsafe not])
		ifTrue: [(self tooDangerousClasses includes: oldClass name)
				ifTrue: [self error: oldClass name , ' cannot be changed'].
			(oldClass ~~ nil
					and: [oldClass shouldNotBeRedefined])
				ifTrue: [self notify: oldClass name asText allBold , ' should not be redefined. \Proceed to store over it.' withCRs]].
	needNew
		ifTrue: [newClass := self
						newSubclassOf: newSuper
						type: type
						instanceVariables: instVars
						from: oldClass.
			newClass
				ifNil: [^ nil].
			newClass setName: className]
		ifFalse: [newClass := oldClass].
	force := (newClass declare: classVarString)
				| (newClass sharing: poolString).
	newCategory := category asSymbol.
	organization := environ
				ifNotNil: [environ organization].
	oldClass isNil
		ifFalse: [oldCategory := (organization categoryOfElement: oldClass name) asSymbol].
	organization classify: newClass name under: newCategory.
	newClass environment: environ.
	newClass := self
				recompile: force
				from: oldClass
				to: newClass
				mutate: false.
	(environ
			at: newClass name
			ifAbsent: [])
			== newClass
		ifFalse: [environ at: newClass name put: newClass.
			Smalltalk globals flushClassNameCache].
	copyOfOldTraitComposition
		ifNotNil: [newClass setTraitComposition: copyOfOldTraitComposition].
	copyOfOldClassTraitComposition
		ifNotNil: [newClass class setTraitComposition: copyOfOldClassTraitComposition].
	newClass doneCompiling.
	oldClass isNil
		ifTrue: [SystemAnnouncer uniqueInstance classAdded: newClass inCategory: newCategory.
			^ newClass].
	newCategory ~= oldCategory
		ifTrue: [SystemAnnouncer uniqueInstance
				class: newClass
				recategorizedFrom: oldCategory
				to: category]
		ifFalse: [SystemAnnouncer uniqueInstance classDefinitionChangedFrom: copyOfOldClass to: newClass]] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		className: 	#Calculette
		env: 	a SystemDictionary(lots of globals)
		newSuper: 	Object
		type: 	#normal
		instVarString: 	'etatCourant etats accumulateur operateur'
		classVarString: 	'EtatCalculette EtatCalculette String double'
		poolString: 	''
		category: 	'IN107'
		unsafe: 	false
		oldClass: 	Calculette
		instVars: 	#('etatCourant' 'etats' 'accumulateur' 'operateur')
		classVars: 	#(#EtatCalculette #EtatCalculette #String #double)
		copyOfOldClass: 	Calculette
		copyOfOldTraitComposition: 	nil
		copyOfOldClassTraitComposition: 	nil
		newClass: 	nil
		newCategory: 	nil
		oldCategory: 	nil
		needNew: 	nil
		force: 	nil
		organization: 	nil
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


BlockClosure>>ensure:
	Receiver: [| newCategory oldCategory needNew force organization |
unsafe
		ifFalse: [(self validateS...etc...
	Arguments and temporary variables: 
		aBlock: 	[copyOfOldClass
		ifNotNil: [copyOfOldClass superclass removeSubclass: ...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariable...etc...
		startpc: 	376
		numArgs: 	0


ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		className: 	#Calculette
		env: 	a SystemDictionary(lots of globals)
		newSuper: 	Object
		type: 	#normal
		instVarString: 	'etatCourant etats accumulateur operateur'
		classVarString: 	'EtatCalculette EtatCalculette String double'
		poolString: 	''
		category: 	'IN107'
		unsafe: 	false
		oldClass: 	Calculette
		instVars: 	#('etatCourant' 'etats' 'accumulateur' 'operateur')
		classVars: 	#(#EtatCalculette #EtatCalculette #String #double)
		copyOfOldClass: 	Calculette
		copyOfOldTraitComposition: 	nil
		copyOfOldClassTraitComposition: 	nil
		newClass: 	nil
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		className: 	#Calculette
		env: 	a SystemDictionary(lots of globals)
		newSuper: 	Object
		type: 	#normal
		instVarString: 	'etatCourant etats accumulateur operateur'
		classVarString: 	'EtatCalculette EtatCalculette String double'
		poolString: 	''
		category: 	'IN107'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		newSuper: 	Object
		t: 	#Calculette
		f: 	'etatCourant etats accumulateur operateur'
		d: 	'EtatCalculette EtatCalculette String double'
		s: 	''
		cat: 	'IN107'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


Object class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: Object
	Arguments and temporary variables: 
		t: 	#Calculette
		f: 	'etatCourant etats accumulateur operateur'
		d: 	'EtatCalculette EtatCalculette String double'
		s: 	''
		cat: 	'IN107'
		class: 	nil
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 339)
		format: 	2
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	an Array(BalloonState UndefinedObject Boolean FillStyle Authorizer ...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(TextStyl...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	'Object subclass: #Calculette
	instanceVariableNames: ''etatCoura...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a PluggableTextMorphWithLimits(148635648)
		failBlock: 	[^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ Object
		subclass: #Calculette
		instanceVariableNames: 'et...etc...
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream
		requestor: 	a PluggableTextMorphWithLimits(148635648)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


Compiler class>>evaluate:for:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'Object subclass: #Calculette
	instanceVariableNames: ''etatCoura...etc...
		anObject: 	nil
		aController: 	a PluggableTextMorphWithLimits(148635648)
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->Compil...etc...
		format: 	142
		layout: 	nil
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


Compiler class>>evaluate:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'Object subclass: #Calculette
	instanceVariableNames: ''etatCoura...etc...
		aController: 	a PluggableTextMorphWithLimits(148635648)
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->Compil...etc...
		format: 	142
		layout: 	nil
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


NautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aString: 	'Object subclass: #Calculette
	instanceVariableNames: ''etatCourant et...etc...
		aController: 	a PluggableTextMorphWithLimits(148635648)
		aClass: 	Calculette
		oldClass: 	Object
		class: 	nil
		newClassName: 	'Calculette'
		defTokens: 	an OrderedCollection('Object' 'subclass:' '#Calculette' 'instanceVar...etc...
		keywdIx: 	2
		envt: 	a SystemDictionary(lots of globals)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a Nautilus
		window: 	a NautilusWindow(160694272)
		hierarchyClass: 	Calculette
		cachedHierarchy: 	an IdentityDictionary(Calculette->an OrderedCollection(' ' Cal...etc...
		sourceTextArea: 	a PluggableTextMorphWithLimits(148635648)
		firstColumn: 	a PanelMorph(20709376)
		secondColumn: 	a PanelMorph(826015744)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a RPackage(IN107)->true )
		classesSelection: 	a Dictionary(Calculette->true )
		list: 	a PluggableIconListMorph(56885248)
		list2: 	a PluggableIconListMorph(862191616)
		sourceCodePanel: 	a PanelMorph(1052246016)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(887095296)
		list2Elements: 	{Calculette}
		listElements: 	an Array(a RPackage(AST-Core) a RPackage(AST-Core-Matching) a RPa...etc...
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(148635648)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(653524992)
		contentSelection: 	nil
		categories: 	nil
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		methods: 	nil


NautilusUI(AbstractNautilusUI)>>compileAClassFrom:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aString: 	'Object subclass: #Calculette
	instanceVariableNames: ''etatCourant et...etc...
		aController: 	a PluggableTextMorphWithLimits(148635648)
		class: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a Nautilus
		window: 	a NautilusWindow(160694272)
		hierarchyClass: 	Calculette
		cachedHierarchy: 	an IdentityDictionary(Calculette->an OrderedCollection(' ' Cal...etc...
		sourceTextArea: 	a PluggableTextMorphWithLimits(148635648)
		firstColumn: 	a PanelMorph(20709376)
		secondColumn: 	a PanelMorph(826015744)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a RPackage(IN107)->true )
		classesSelection: 	a Dictionary(Calculette->true )
		list: 	a PluggableIconListMorph(56885248)
		list2: 	a PluggableIconListMorph(862191616)
		sourceCodePanel: 	a PanelMorph(1052246016)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(887095296)
		list2Elements: 	{Calculette}
		listElements: 	an Array(a RPackage(AST-Core) a RPackage(AST-Core-Matching) a RPa...etc...
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(148635648)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(653524992)
		contentSelection: 	nil
		categories: 	nil
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		methods: 	nil


NautilusUI>>compileSource:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aText: 	a Text for 'Object subclass: #Calculette
	instanceVariableNames: ''etatC...etc...
		aController: 	a PluggableTextMorphWithLimits(148635648)
		source: 	'Object subclass: #Calculette
	instanceVariableNames: ''etatCourant eta...etc...
		category: 	nil
		method: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a Nautilus
		window: 	a NautilusWindow(160694272)
		hierarchyClass: 	Calculette
		cachedHierarchy: 	an IdentityDictionary(Calculette->an OrderedCollection(' ' Cal...etc...
		sourceTextArea: 	a PluggableTextMorphWithLimits(148635648)
		firstColumn: 	a PanelMorph(20709376)
		secondColumn: 	a PanelMorph(826015744)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a RPackage(IN107)->true )
		classesSelection: 	a Dictionary(Calculette->true )
		list: 	a PluggableIconListMorph(56885248)
		list2: 	a PluggableIconListMorph(862191616)
		sourceCodePanel: 	a PanelMorph(1052246016)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(887095296)
		list2Elements: 	{Calculette}
		listElements: 	an Array(a RPackage(AST-Core) a RPackage(AST-Core-Matching) a RPa...etc...
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(148635648)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(653524992)
		contentSelection: 	nil
		categories: 	nil
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		methods: 	nil


[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
	Receiver: a PluggableTextMorphWithLimits(148635648)
	Arguments and temporary variables: 
		acceptedText: 	a Text for 'Object subclass: #Calculette
	instanceVariableNames: ...etc...
	Receiver's instance variables: 
		bounds: 	(128.0@352.0) corner: (944.0@629.0)
		owner: 	a MultipleMethodsEditor(653524992)
		submorphs: 	an Array(an AlphaImageMorph(389545984) a TransformMorph(491257856))
		fullBounds: 	(128@352) corner: (944@629)
		color: 	Color white
		extension: 	a MorphExtension (106168320) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(175636480)
		scroller: 	a TransformMorph(491257856)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(884473856)
		textMorph: 	a TextMorphForEditView(133431296)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(149 to: 148)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(389545984)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


BlockClosure>>ensure:
	Receiver: [^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perfo...etc...
	Arguments and temporary variables: 
		aBlock: 	[unstyledAcceptText := nil]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInMod...etc...
		startpc: 	65
		numArgs: 	0


PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
	Receiver: a PluggableTextMorphWithLimits(148635648)
	Arguments and temporary variables: 
		acceptedText: 	a Text for 'Object subclass: #Calculette
	instanceVariableNames: ...etc...
	Receiver's instance variables: 
		bounds: 	(128.0@352.0) corner: (944.0@629.0)
		owner: 	a MultipleMethodsEditor(653524992)
		submorphs: 	an Array(an AlphaImageMorph(389545984) a TransformMorph(491257856))
		fullBounds: 	(128@352) corner: (944@629)
		color: 	Color white
		extension: 	a MorphExtension (106168320) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(175636480)
		scroller: 	a TransformMorph(491257856)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(884473856)
		textMorph: 	a TextMorphForEditView(133431296)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(149 to: 148)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(389545984)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptBasic
	Receiver: a PluggableTextMorphWithLimits(148635648)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	(149 to: 148)
		saveScrollerOffset: 	(-3@0)
	Receiver's instance variables: 
		bounds: 	(128.0@352.0) corner: (944.0@629.0)
		owner: 	a MultipleMethodsEditor(653524992)
		submorphs: 	an Array(an AlphaImageMorph(389545984) a TransformMorph(491257856))
		fullBounds: 	(128@352) corner: (944@629)
		color: 	Color white
		extension: 	a MorphExtension (106168320) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(175636480)
		scroller: 	a TransformMorph(491257856)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(884473856)
		textMorph: 	a TextMorphForEditView(133431296)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(149 to: 148)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(389545984)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits>>acceptBasic
	Receiver: a PluggableTextMorphWithLimits(148635648)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	nil
		saveScrollerOffset: 	nil
	Receiver's instance variables: 
		bounds: 	(128.0@352.0) corner: (944.0@629.0)
		owner: 	a MultipleMethodsEditor(653524992)
		submorphs: 	an Array(an AlphaImageMorph(389545984) a TransformMorph(491257856))
		fullBounds: 	(128@352) corner: (944@629)
		color: 	Color white
		extension: 	a MorphExtension (106168320) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(175636480)
		scroller: 	a TransformMorph(491257856)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(884473856)
		textMorph: 	a TextMorphForEditView(133431296)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(149 to: 148)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(389545984)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>accept
	Receiver: a PluggableTextMorphWithLimits(148635648)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(128.0@352.0) corner: (944.0@629.0)
		owner: 	a MultipleMethodsEditor(653524992)
		submorphs: 	an Array(an AlphaImageMorph(389545984) a TransformMorph(491257856))
		fullBounds: 	(128@352) corner: (944@629)
		color: 	Color white
		extension: 	a MorphExtension (106168320) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(175636480)
		scroller: 	a TransformMorph(491257856)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(884473856)
		textMorph: 	a TextMorphForEditView(133431296)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(149 to: 148)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(389545984)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


TextMorphForEditView>>acceptContents
	Receiver: a TextMorphForEditView(133431296)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (808@82)
		owner: 	a TransformMorph(491257856)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (808@82)
		color: 	Color black
		extension: 	a MorphExtension (178257920) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'Object subclass: #Calculette
	instanceVariableNames: ''etatCo...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorphWithLimits(148635648)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[:morph | morph acceptContents] in TextMorph class>>buildTextEditorKeymapsOn:
	Receiver: TextMorph
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a TextMorphForEditView(133431296)
	Receiver's instance variables: 
		superclass: 	RectangleMorph
		methodDict: 	a MethodDictionary(size 203)
		format: 	166
		layout: 	nil
		instanceVariables: 	#('textStyle' 'text' 'wrapFlag' 'paragraph' 'editor' 'contai...etc...
		organization: 	a ClassOrganizer
		subclasses: 	{StringMorphEditor. TextMorphForEditView. GrowlMorph}
		name: 	#TextMorph
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Basic'
		traitComposition: 	TAbleToRotate
		localSelectors: 	a Set(#editorClass #setTextStyle: #setFirstCharacter: #margins:...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph acceptContents]
	Arguments and temporary variables: 
		anArg: 	a TextMorphForEditView(133431296)
	Receiver's instance variables: 
		outerContext: 	TextMorph class>>buildTextEditorKeymapsOn:
		startpc: 	88
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph acceptContents]
	Arguments and temporary variables: 
		firstArg: 	a TextMorphForEditView(133431296)
		secondArg: 	a TextMorphForEditView(133431296)
	Receiver's instance variables: 
		outerContext: 	TextMorph class>>buildTextEditorKeymapsOn:
		startpc: 	88
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph acceptContents]
	Arguments and temporary variables: 
		firstArg: 	a TextMorphForEditView(133431296)
		secondArg: 	a TextMorphForEditView(133431296)
		thirdArg: 	[keystroke '<Ctrl-s>']
	Receiver's instance variables: 
		outerContext: 	TextMorph class>>buildTextEditorKeymapsOn:
		startpc: 	88
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#TextMorph)
	Arguments and temporary variables: 
		aKeymap: 	#accept on Ctrl + S do [:morph | morph acceptContents]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
	Receiver's instance variables: 
		target: 	a TextMorphForEditView(133431296)
		category: 	a KMCategory
		morph: 	a TextMorphForEditView(133431296)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #accept on Ctrl + S do [:morph | morph acceptContents]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		listeners: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		l: 	aKMCategoryTarget(#TextMorph)
	Receiver's instance variables: 
		action: 	[:morph | morph acceptContents]
		name: 	#accept
		shortcut: 	Ctrl + S
		defaultShortcut: 	Ctrl + S
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #accept on Ctrl + S do [:morph | morph acceptContents]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		listeners: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph acceptContents]
		name: 	#accept
		shortcut: 	Ctrl + S
		defaultShortcut: 	Ctrl + S
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #accept on Ctrl + S do [:morph | morph acceptContents]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph acceptContents]
		name: 	#accept
		shortcut: 	Ctrl + S
		defaultShortcut: 	Ctrl + S
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#accept on Ctrl + S do [:morph | morph acceptContents]

	Receiver's instance variables: 
		name: 	#TextMorph
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#accept on Ctrl + S do [:morph | morph acceptContents]
)
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	4
		each: 	#accept on Ctrl + S do [:morph | morph acceptContents]

		indexLimiT: 	5
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil #accept on Ctrl + S do [:morph | morph acceptConten...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#TextMorph) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#TextMorph
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#TextMorph)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a TextMorphForEditView(133431296)
		category: 	a KMCategory
		morph: 	a TextMorphForEditView(133431296)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#TextMorph)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(133431296)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	4


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-s>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(133431296)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TextMorphForEditView(133431296)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil



--- The full stack ---
ClassBuilder(Object)>>error:
ClassBuilder>>validateClassvars:from:forSuper:
[| newCategory oldCategory needNew force organization |
unsafe
		ifFalse: [(self validateSuperclass: newSuper forSubclass: oldClass)
				ifFalse: [^ nil].
			(self
					validateInstvars: instVars
					from: oldClass
					forSuper: newSuper)
				ifFalse: [^ nil].
			(self
					validateClassvars: classVars
					from: oldClass
					forSuper: newSuper)
				ifFalse: [^ nil].
			(self
					validateSubclassFormat: type
					from: oldClass
					forSuper: newSuper
					extra: instVars size)
				ifFalse: [^ nil]].
	needNew := self
				needsSubclassOf: newSuper
				type: type
				instanceVariables: instVars
				from: oldClass.
	needNew
		ifNil: [^ nil].
	(needNew
			and: [unsafe not])
		ifTrue: [(self tooDangerousClasses includes: oldClass name)
				ifTrue: [self error: oldClass name , ' cannot be changed'].
			(oldClass ~~ nil
					and: [oldClass shouldNotBeRedefined])
				ifTrue: [self notify: oldClass name asText allBold , ' should not be redefined. \Proceed to store over it.' withCRs]].
	needNew
		ifTrue: [newClass := self
						newSubclassOf: newSuper
						type: type
						instanceVariables: instVars
						from: oldClass.
			newClass
				ifNil: [^ nil].
			newClass setName: className]
		ifFalse: [newClass := oldClass].
	force := (newClass declare: classVarString)
				| (newClass sharing: poolString).
	newCategory := category asSymbol.
	organization := environ
				ifNotNil: [environ organization].
	oldClass isNil
		ifFalse: [oldCategory := (organization categoryOfElement: oldClass name) asSymbol].
	organization classify: newClass name under: newCategory.
	newClass environment: environ.
	newClass := self
				recompile: force
				from: oldClass
				to: newClass
				mutate: false.
	(environ
			at: newClass name
			ifAbsent: [])
			== newClass
		ifFalse: [environ at: newClass name put: newClass.
			Smalltalk globals flushClassNameCache].
	copyOfOldTraitComposition
		ifNotNil: [newClass setTraitComposition: copyOfOldTraitComposition].
	copyOfOldClassTraitComposition
		ifNotNil: [newClass class setTraitComposition: copyOfOldClassTraitComposition].
	newClass doneCompiling.
	oldClass isNil
		ifTrue: [SystemAnnouncer uniqueInstance classAdded: newClass inCategory: newCategory.
			^ newClass].
	newCategory ~= oldCategory
		ifTrue: [SystemAnnouncer uniqueInstance
				class: newClass
				recategorizedFrom: oldCategory
				to: category]
		ifFalse: [SystemAnnouncer uniqueInstance classDefinitionChangedFrom: copyOfOldClass to: newClass]] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
BlockClosure>>ensure:
ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
ClassBuilder>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
Object class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
Compiler class>>evaluate:for:notifying:logged:
Compiler class>>evaluate:notifying:logged:
NautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
NautilusUI(AbstractNautilusUI)>>compileAClassFrom:notifying:
NautilusUI>>compileSource:notifying:
[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
BlockClosure>>ensure:
PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptBasic
PluggableTextMorphWithLimits>>acceptBasic
PluggableTextMorphWithLimits(PluggableTextMorph)>>accept
TextMorphForEditView>>acceptContents
[:morph | morph acceptContents] in TextMorph class>>buildTextEditorKeymapsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ENombre1>>adaptToNumber:andSend:
10 December 2013 11:33:36.43 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

ENombre1(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: an ENombre1
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: -1 andSend: #+
		exception: 	MessageNotUnderstood: ENombre1>>adaptToNumber:andSend:
		resumeValue: 	nil
	Receiver's instance variables: 
		calc: 	a Calculette


ENombre1(Object)>>adaptToInteger:andSend:
	Receiver: an ENombre1
	Arguments and temporary variables: 
		rcvr: 	-1
		selector: 	#+
	Receiver's instance variables: 
		calc: 	a Calculette


SmallInteger(Integer)>>+
	Receiver: -1
	Arguments and temporary variables: 
		aNumber: 	an ENombre1
	Receiver's instance variables: 
-1

SmallInteger>>+
	Receiver: -1
	Arguments and temporary variables: 
		aNumber: 	an ENombre1
	Receiver's instance variables: 
-1

Calculette>>enter:
	Receiver: a Calculette
	Arguments and temporary variables: 
		s: 	1
	Receiver's instance variables: 
		etats: 	an Array(an ENombre1 an EOperateur an ENombre2)
		etatCourant: 	an ENombre1
		accumulateur: 	0
		operateur: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(175636480)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	C := Calculette new.
	C enter: 1;
		 enter: '+';
		 enter: 2....etc...
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(175636480)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 112)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 112)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C enter: 1; enter: ''+''; enter: 2.
Tran...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 112)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 112)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph doIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	141
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	141
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
		thirdArg: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	141
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Ctrl + D do [:morph | morph doIt]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Ctrl + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#doIt on Ctrl + D do [:morph | morph doIt]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOfIt]
 #sendersOfIt on ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	8
		each: 	#doIt on Ctrl + D do [:morph | morph doIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOf...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(752615424)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-d>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(175636480)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C enter: 1; enter: ''+''; enter: 2.
Tran...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C enter: 1; enter: ''+''; enter: 2.
Tran...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(175636480)
	Receiver's instance variables: 
		timeStamp: 	3115383
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(224.0@76.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	4
		charCode: 	100
		scanCode: 	4


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C enter: 1; enter: ''+''; enter: 2.
Tran...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C enter: 1; enter: ''+''; enter: 2.
Tran...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
ENombre1(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
ENombre1(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>+
SmallInteger>>+
Calculette>>enter:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[:morph | morph doIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ENombre1 class>>for:
10 December 2013 11:35:06.762 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

ENombre1 class(Object)>>doesNotUnderstand: #for:
	Receiver: ENombre1
	Arguments and temporary variables: 
		aMessage: 	for: a Calculette
		exception: 	MessageNotUnderstood: ENombre1 class>>for:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	EtatCalculette
		methodDict: 	a MethodDictionary(#enter:->ENombre1>>#enter: )
		format: 	132
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#ENombre1
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#IN107
		traitComposition: 	{}
		localSelectors: 	nil


Calculette>>initialize
	Receiver: a Calculette
	Arguments and temporary variables: 

	Receiver's instance variables: 
		etats: 	nil
		etatCourant: 	nil
		accumulateur: 	nil
		operateur: 	nil


Calculette class(Behavior)>>new
	Receiver: Calculette
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#accumulateur->Calculette>>#accumulateur #accumu...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	#('etats' 'etatCourant' 'accumulateur' 'operateur')
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#Calculette
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#IN107
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(175636480)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C := Calculette new
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(175636480)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 12)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 12)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C enter: 1; enter: ''+''; enter: 2.
Tran...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 12)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(13 to: 12)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
		thirdArg: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOfIt]
 #sendersOfIt on ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	11
		each: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOf...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(752615424)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-i>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(175636480)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C enter: 1; enter: ''+''; enter: 2.
Tran...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C enter: 1; enter: ''+''; enter: 2.
Tran...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(175636480)
	Receiver's instance variables: 
		timeStamp: 	3205735
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(73.0@13.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	9
		charCode: 	105
		scanCode: 	9


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C enter: 1; enter: ''+''; enter: 2.
Tran...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C enter: 1; enter: ''+''; enter: 2.
Tran...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		focusHolder: 	a TextMorphForEditView(175636480)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(100@415) corner: (116@431)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(100@415) corner: (116@431)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(175636480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(100@415) mouseOver nil nil]
		targetOffset: 	(77.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3204315 100 415 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	2


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (973@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(210239488) a Nauti...etc...
		fullBounds: 	(0@0) corner: (973@662)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0



--- The full stack ---
ENombre1 class(Object)>>doesNotUnderstand: #for:
Calculette>>initialize
Calculette class(Behavior)>>new
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ENombre1>>adaptToNumber:andSend:
10 December 2013 11:35:12.574 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

ENombre1(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: an ENombre1
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: -1 andSend: #+
		exception: 	MessageNotUnderstood: ENombre1>>adaptToNumber:andSend:
		resumeValue: 	nil
	Receiver's instance variables: 
		calc: 	a Calculette


ENombre1(Object)>>adaptToInteger:andSend:
	Receiver: an ENombre1
	Arguments and temporary variables: 
		rcvr: 	-1
		selector: 	#+
	Receiver's instance variables: 
		calc: 	a Calculette


SmallInteger(Integer)>>+
	Receiver: -1
	Arguments and temporary variables: 
		aNumber: 	an ENombre1
	Receiver's instance variables: 
-1

SmallInteger>>+
	Receiver: -1
	Arguments and temporary variables: 
		aNumber: 	an ENombre1
	Receiver's instance variables: 
-1

Calculette>>enter:
	Receiver: a Calculette
	Arguments and temporary variables: 
		s: 	1
	Receiver's instance variables: 
		etats: 	an Array(an ENombre1 an EOperateur an ENombre2)
		etatCourant: 	an ENombre1
		accumulateur: 	0
		operateur: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(175636480)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C enter: 1;
		 enter: '+';
		 enter: 2
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(175636480)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(35 to: 34)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(35 to: 34)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C enter: 1; enter: ''+''; enter: 2.
Tran...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(35 to: 34)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(35 to: 34)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
		thirdArg: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOfIt]
 #sendersOfIt on ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	11
		each: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOf...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(752615424)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-i>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(175636480)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C enter: 1; enter: ''+''; enter: 2.
Tran...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C enter: 1; enter: ''+''; enter: 2.
Tran...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(175636480)
	Receiver's instance variables: 
		timeStamp: 	3211543
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(76.0@26.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	9
		charCode: 	105
		scanCode: 	9


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C enter: 1; enter: ''+''; enter: 2.
Tran...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C enter: 1; enter: ''+''; enter: 2.
Tran...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		focusHolder: 	a TextMorphForEditView(175636480)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(103@428) corner: (119@444)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(103@428) corner: (119@444)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(175636480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(103@428) mouseOver nil nil]
		targetOffset: 	(80.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3210443 103 428 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
ENombre1(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
ENombre1(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>+
SmallInteger>>+
Calculette>>enter:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ENombre1>>adaptToNumber:andSend:
10 December 2013 11:35:39.772 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

ENombre1(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: an ENombre1
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: -1 andSend: #+
		exception: 	MessageNotUnderstood: ENombre1>>adaptToNumber:andSend:
		resumeValue: 	nil
	Receiver's instance variables: 
		calc: 	a Calculette


ENombre1(Object)>>adaptToInteger:andSend:
	Receiver: an ENombre1
	Arguments and temporary variables: 
		rcvr: 	-1
		selector: 	#+
	Receiver's instance variables: 
		calc: 	a Calculette


SmallInteger(Integer)>>+
	Receiver: -1
	Arguments and temporary variables: 
		aNumber: 	an ENombre1
	Receiver's instance variables: 
-1

SmallInteger>>+
	Receiver: -1
	Arguments and temporary variables: 
		aNumber: 	an ENombre1
	Receiver's instance variables: 
-1

Calculette>>enter:
	Receiver: a Calculette
	Arguments and temporary variables: 
		s: 	1
	Receiver's instance variables: 
		etats: 	an Array(an ENombre1 an EOperateur an ENombre2)
		etatCourant: 	an ENombre1
		accumulateur: 	0
		operateur: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(175636480)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C enter: 1;
		 enter: '+';
		 enter: 2
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(175636480)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(25 to: 24)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(25 to: 24)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1; enter: ''+''; enter: 2.
Tr...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(25 to: 24)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(25 to: 24)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
		thirdArg: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOfIt]
 #sendersOfIt on ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	11
		each: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOf...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(752615424)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-i>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(175636480)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1; enter: ''+''; enter: 2.
Tr...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1; enter: ''+''; enter: 2.
Tr...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(175636480)
	Receiver's instance variables: 
		timeStamp: 	3238727
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(6.0@43.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	9
		charCode: 	105
		scanCode: 	9


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1; enter: ''+''; enter: 2.
Tr...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@66)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@66)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1; enter: ''+''; enter: 2.
Tr...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		focusHolder: 	a TextMorphForEditView(175636480)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(33@445) corner: (49@461)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(33@445) corner: (49@461)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(175636480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@445) mouseOver nil nil]
		targetOffset: 	(10.0@44.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3237475 33 445 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
ENombre1(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
ENombre1(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>+
SmallInteger>>+
Calculette>>enter:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ENombre1>>adaptToNumber:andSend:
10 December 2013 11:35:52.07 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

ENombre1(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: an ENombre1
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: -1 andSend: #+
		exception: 	MessageNotUnderstood: ENombre1>>adaptToNumber:andSend:
		resumeValue: 	nil
	Receiver's instance variables: 
		calc: 	a Calculette


ENombre1(Object)>>adaptToInteger:andSend:
	Receiver: an ENombre1
	Arguments and temporary variables: 
		rcvr: 	-1
		selector: 	#+
	Receiver's instance variables: 
		calc: 	a Calculette


SmallInteger(Integer)>>+
	Receiver: -1
	Arguments and temporary variables: 
		aNumber: 	an ENombre1
	Receiver's instance variables: 
-1

SmallInteger>>+
	Receiver: -1
	Arguments and temporary variables: 
		aNumber: 	an ENombre1
	Receiver's instance variables: 
-1

Calculette>>enter:
	Receiver: a Calculette
	Arguments and temporary variables: 
		s: 	1
	Receiver's instance variables: 
		etats: 	an Array(an ENombre1 an EOperateur an ENombre2)
		etatCourant: 	an ENombre1
		accumulateur: 	0
		operateur: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(175636480)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C enter: 1
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(175636480)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(35 to: 34)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(35 to: 34)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1.
C enter: ''+''; enter: 2.
...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(35 to: 34)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(35 to: 34)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
		thirdArg: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOfIt]
 #sendersOfIt on ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	11
		each: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOf...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(752615424)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-i>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(175636480)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1.
C enter: ''+''; enter: 2.
...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1.
C enter: ''+''; enter: 2.
...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(175636480)
	Receiver's instance variables: 
		timeStamp: 	3251031
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(95.0@43.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	9
		charCode: 	105
		scanCode: 	9


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1.
C enter: ''+''; enter: 2.
...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1.
C enter: ''+''; enter: 2.
...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		focusHolder: 	a TextMorphForEditView(175636480)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(122@445) corner: (138@461)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(122@445) corner: (138@461)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(175636480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(122@445) mouseOver nil nil]
		targetOffset: 	(80.0@43.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3250387 123 445 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
ENombre1(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
ENombre1(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>+
SmallInteger>>+
Calculette>>enter:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ENombre1>>adaptToNumber:andSend:
10 December 2013 11:36:21.994 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

ENombre1(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: an ENombre1
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: -1 andSend: #+
		exception: 	MessageNotUnderstood: ENombre1>>adaptToNumber:andSend:
		resumeValue: 	nil
	Receiver's instance variables: 
		calc: 	a Calculette


ENombre1(Object)>>adaptToInteger:andSend:
	Receiver: an ENombre1
	Arguments and temporary variables: 
		rcvr: 	-1
		selector: 	#+
	Receiver's instance variables: 
		calc: 	a Calculette


SmallInteger(Integer)>>+
	Receiver: -1
	Arguments and temporary variables: 
		aNumber: 	an ENombre1
	Receiver's instance variables: 
-1

SmallInteger>>+
	Receiver: -1
	Arguments and temporary variables: 
		aNumber: 	an ENombre1
	Receiver's instance variables: 
-1

Calculette>>enter:
	Receiver: a Calculette
	Arguments and temporary variables: 
		s: 	'1'
	Receiver's instance variables: 
		etats: 	an Array(an ENombre1 an EOperateur an ENombre2)
		etatCourant: 	an ENombre1
		accumulateur: 	0
		operateur: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(175636480)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C enter: '1'
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(175636480)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(36 to: 35)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(36 to: 35)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: ''1''.
C enter: ''+''; enter:...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(36 to: 35)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(36 to: 35)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
		thirdArg: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOfIt]
 #sendersOfIt on ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	11
		each: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOf...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(752615424)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-i>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(175636480)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: ''1''.
C enter: ''+''; enter:...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: ''1''.
C enter: ''+''; enter:...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(175636480)
	Receiver's instance variables: 
		timeStamp: 	3280967
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(387.0@ -33.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	9
		charCode: 	105
		scanCode: 	9


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: ''1''.
C enter: ''+''; enter:...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@82)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@82)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: ''1''.
C enter: ''+''; enter:...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		focusHolder: 	a TextMorphForEditView(175636480)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(414@369) corner: (430@385)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(414@369) corner: (430@385)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(175636480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(414@369) mouseOver nil nil]
		targetOffset: 	(60.0@41.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3272979 414 369 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
ENombre1(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
ENombre1(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>+
SmallInteger>>+
Calculette>>enter:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>2
10 December 2013 11:48:40.63 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

SmallInteger(Object)>>doesNotUnderstand: 2
	Receiver: 2
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
2

ENombre2>>enter:
	Receiver: an ENombre2
	Arguments and temporary variables: 
		s: 	2
		tmp: 	nil
	Receiver's instance variables: 
		calc: 	a Calculette


Calculette>>enter:
	Receiver: a Calculette
	Arguments and temporary variables: 
		s: 	2
	Receiver's instance variables: 
		etats: 	an Array(an ENombre1 an EOperateur an ENombre2)
		etatCourant: 	an ENombre2
		accumulateur: 	2
		operateur: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(175636480)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C enter: 2
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(175636480)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 64)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 64)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 64)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 64)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph doIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	141
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	141
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
		thirdArg: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	141
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Ctrl + D do [:morph | morph doIt]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Ctrl + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#doIt on Ctrl + D do [:morph | morph doIt]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOfIt]
 #sendersOfIt on ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	8
		each: 	#doIt on Ctrl + D do [:morph | morph doIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOf...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(752615424)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-d>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(175636480)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(175636480)
	Receiver's instance variables: 
		timeStamp: 	4019399
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(177.0@84.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	4
		charCode: 	100
		scanCode: 	4


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		focusHolder: 	a TextMorphForEditView(175636480)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(151@486) corner: (167@502)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(151@486) corner: (167@502)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(175636480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(159@495) mouseOver nil nil]
		targetOffset: 	(137.0@77.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4019955 161 495 0 0 0 1)
		lastKeyScanCode: 	4
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (973@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(210239488) a Syste...etc...
		fullBounds: 	(0@0) corner: (973@662)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: 2
ENombre2>>enter:
Calculette>>enter:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[:morph | morph doIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>2
10 December 2013 11:49:02.998 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

SmallInteger(Object)>>doesNotUnderstand: 2
	Receiver: 2
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
2

ENombre2>>enter:
	Receiver: an ENombre2
	Arguments and temporary variables: 
		s: 	1
		tmp: 	nil
	Receiver's instance variables: 
		calc: 	a Calculette


Calculette>>enter:
	Receiver: a Calculette
	Arguments and temporary variables: 
		s: 	1
	Receiver's instance variables: 
		etats: 	an Array(an ENombre1 an EOperateur an ENombre2)
		etatCourant: 	an ENombre2
		accumulateur: 	2
		operateur: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(175636480)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C enter: 1
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(175636480)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(36 to: 35)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(36 to: 35)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(36 to: 35)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(36 to: 35)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
		thirdArg: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOfIt]
 #sendersOfIt on ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	11
		each: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOf...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(752615424)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-i>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(175636480)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(175636480)
	Receiver's instance variables: 
		timeStamp: 	4041959
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(109.0@47.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	9
		charCode: 	105
		scanCode: 	9


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		focusHolder: 	a TextMorphForEditView(175636480)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(136@449) corner: (152@465)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(136@449) corner: (152@465)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(175636480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(136@449) mouseOver nil nil]
		targetOffset: 	(89.0@36.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4041411 136 450 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (973@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(210239488) a Syste...etc...
		fullBounds: 	(0@0) corner: (973@662)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: 2
ENombre2>>enter:
Calculette>>enter:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>2
10 December 2013 11:50:11.556 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

SmallInteger(Object)>>doesNotUnderstand: 2
	Receiver: 2
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
2

ENombre2>>enter:
	Receiver: an ENombre2
	Arguments and temporary variables: 
		s: 	2
		tmp: 	nil
	Receiver's instance variables: 
		calc: 	a Calculette


Calculette>>enter:
	Receiver: a Calculette
	Arguments and temporary variables: 
		s: 	2
	Receiver's instance variables: 
		etats: 	an Array(an ENombre1 an EOperateur an ENombre2)
		etatCourant: 	an ENombre2
		accumulateur: 	2
		operateur: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(175636480)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C enter: 2
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(175636480)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 64)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 64)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 64)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 64)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph doIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	141
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	141
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
		thirdArg: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	141
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Ctrl + D do [:morph | morph doIt]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Ctrl + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#doIt on Ctrl + D do [:morph | morph doIt]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOfIt]
 #sendersOfIt on ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	8
		each: 	#doIt on Ctrl + D do [:morph | morph doIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOf...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(752615424)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-d>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(175636480)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(175636480)
	Receiver's instance variables: 
		timeStamp: 	4110519
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(109.0@85.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	4
		charCode: 	100
		scanCode: 	4


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		focusHolder: 	a TextMorphForEditView(175636480)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(136@487) corner: (152@503)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(136@487) corner: (152@503)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(175636480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(136@487) mouseOver nil nil]
		targetOffset: 	(111.0@74.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4109683 136 487 0 0 0 1)
		lastKeyScanCode: 	4
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (973@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(210239488) a Nauti...etc...
		fullBounds: 	(0@0) corner: (973@662)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: 2
ENombre2>>enter:
Calculette>>enter:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[:morph | morph doIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ENombre1 class>>for:
10 December 2013 11:50:33.49 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

ENombre1 class(Object)>>doesNotUnderstand: #for:
	Receiver: ENombre1
	Arguments and temporary variables: 
		aMessage: 	for: a Calculette
		exception: 	MessageNotUnderstood: ENombre1 class>>for:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	EtatCalculette
		methodDict: 	a MethodDictionary(#enter:->ENombre1>>#enter: )
		format: 	132
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#ENombre1
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#IN107
		traitComposition: 	{}
		localSelectors: 	nil


Calculette>>initialize
	Receiver: a Calculette
	Arguments and temporary variables: 

	Receiver's instance variables: 
		etats: 	nil
		etatCourant: 	nil
		accumulateur: 	nil
		operateur: 	nil


Calculette class(Behavior)>>new
	Receiver: Calculette
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#accumulateur->Calculette>>#accumulateur #accumu...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	#('etats' 'etatCourant' 'accumulateur' 'operateur')
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#Calculette
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#IN107
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(175636480)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C := Calculette new
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(175636480)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(21 to: 20)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(21 to: 20)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(21 to: 20)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(21 to: 20)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


Workspace(Object)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#lf
		encoding: 	'utf-8'
		stylingActive: 	true
		contents: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ...etc...


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(665321472)'Do it'
	Arguments and temporary variables: 
		evt: 	[(190@318) mouseUp 4132451 nil]
		w: 	a PasteUpMorph(425197568) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(160.0@309.0) corner: (303.0@327.0)
		owner: 	a MenuMorph(432275456)
		submorphs: 	#()
		fullBounds: 	(160.0@309.0) corner: (303.0@327.0)
		color: 	Color black
		extension: 	a MorphExtension (742916096) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(752615424))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(665321472)'Do it'
	Arguments and temporary variables: 
		evt: 	[(190@318) mouseUp 4132451 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(160.0@309.0) corner: (303.0@327.0)
		owner: 	a MenuMorph(432275456)
		submorphs: 	#()
		fullBounds: 	(160.0@309.0) corner: (303.0@327.0)
		color: 	Color black
		extension: 	a MorphExtension (742916096) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(752615424))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(665321472)'Do it'
	Arguments and temporary variables: 
		evt: 	[(190@318) mouseUp 4132451 nil]
	Receiver's instance variables: 
		bounds: 	(160.0@309.0) corner: (303.0@327.0)
		owner: 	a MenuMorph(432275456)
		submorphs: 	#()
		fullBounds: 	(160.0@309.0) corner: (303.0@327.0)
		color: 	Color black
		extension: 	a MorphExtension (742916096) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(752615424))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(665321472)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(190@318) mouseUp 4132451 nil]
	Receiver's instance variables: 
		bounds: 	(160.0@309.0) corner: (303.0@327.0)
		owner: 	a MenuMorph(432275456)
		submorphs: 	#()
		fullBounds: 	(160.0@309.0) corner: (303.0@327.0)
		color: 	Color black
		extension: 	a MorphExtension (742916096) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(752615424))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MouseButtonEvent>>sentTo:
	Receiver: [(190@318) mouseUp 4132451 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(665321472)'Do it'
	Receiver's instance variables: 
		timeStamp: 	4132451
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(190@318)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(665321472)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(190@318) mouseUp 4132451 nil]
	Receiver's instance variables: 
		bounds: 	(160.0@309.0) corner: (303.0@327.0)
		owner: 	a MenuMorph(432275456)
		submorphs: 	#()
		fullBounds: 	(160.0@309.0) corner: (303.0@327.0)
		color: 	Color black
		extension: 	a MorphExtension (742916096) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(752615424))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(190@318) mouseUp 4132451 nil]
		aMorph: 	a ToggleMenuItemMorph(665321472)'Do it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(190@318) mouseUp 4132451 nil]
		aMorph: 	a ToggleMenuItemMorph(665321472)'Do it'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(665321472)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(190@318) mouseUp 4132451 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(160.0@309.0) corner: (303.0@327.0)
		owner: 	a MenuMorph(432275456)
		submorphs: 	#()
		fullBounds: 	(160.0@309.0) corner: (303.0@327.0)
		color: 	Color black
		extension: 	a MorphExtension (742916096) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(752615424))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(190@318) mouseUp 4132451 nil]
		aMorph: 	a MenuMorph(432275456)
		localEvt: 	[(190@318) mouseUp 4132451 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(665321472)'Do it'
		morphs: 	an Array(a ToggleMenuItemMorph(665321472)'Do it' a ToggleMenuItemMorph(...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(190@318) mouseUp 4132451 nil]
		aMorph: 	a MenuMorph(432275456)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(432275456)
	Arguments and temporary variables: 
		anEvent: 	[(190@318) mouseUp 4132451 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(155.0@304.0) corner: (308.0@644.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(665321472)'Do it' a ToggleMenuItemMor...etc...
		fullBounds: 	(155.0@304.0) corner: (308.0@644.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (459276288) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(665321472)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(665321472)'Do it' a Toggl...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(432275456)
	Arguments and temporary variables: 
		anEvent: 	[(190@318) mouseUp 4132451 nil]
	Receiver's instance variables: 
		bounds: 	(155.0@304.0) corner: (308.0@644.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(665321472)'Do it' a ToggleMenuItemMor...etc...
		fullBounds: 	(155.0@304.0) corner: (308.0@644.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (459276288) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(665321472)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(665321472)'Do it' a Toggl...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(432275456)
	Arguments and temporary variables: 
		evt: 	[(190@318) mouseUp 4132451 nil]
	Receiver's instance variables: 
		bounds: 	(155.0@304.0) corner: (308.0@644.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(665321472)'Do it' a ToggleMenuItemMor...etc...
		fullBounds: 	(155.0@304.0) corner: (308.0@644.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (459276288) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(665321472)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(665321472)'Do it' a Toggl...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(190@318) mouseUp 4132451 nil]
		focusHolder: 	a MenuMorph(432275456)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(345@416) corner: (361@432)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(345@416) corner: (361@432)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(345@416) mouseOver nil nil]
		targetOffset: 	(30.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4132787 342 416 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(190@318) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (973@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(210239488) a Syste...etc...
		fullBounds: 	(0@0) corner: (973@662)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(190@318) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (973@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(210239488) a Syste...etc...
		fullBounds: 	(0@0) corner: (973@662)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(190@318) mouseUp 4132451 nil]
		focusHolder: 	a MenuMorph(432275456)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(346@416) corner: (362@432)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(346@416) corner: (362@432)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(346@416) mouseOver nil nil]
		targetOffset: 	(30.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4132809 346 416 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(190@318) mouseUp 4132451 nil]
		focusHolder: 	a MenuMorph(432275456)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(346@416) corner: (362@432)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(346@416) corner: (362@432)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(346@416) mouseOver nil nil]
		targetOffset: 	(30.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4132809 346 416 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(190@318) mouseUp 4132451 nil]
	Receiver's instance variables: 
		bounds: 	(346@415) corner: (362@431)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(346@415) corner: (362@431)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(346@415) mouseOver nil nil]
		targetOffset: 	(30.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4132851 346 415 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(190@318) mouseUp 4132451 nil]
		evt: 	[(190@318) mouseUp 4132451 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(346@415) corner: (362@431)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(346@415) corner: (362@431)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(346@415) mouseOver nil nil]
		targetOffset: 	(30.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4132851 346 415 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
ENombre1 class(Object)>>doesNotUnderstand: #for:
Calculette>>initialize
Calculette class(Behavior)>>new
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(Object)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
[:menu | 
menu setInvokingView: self.
	menu invokeModal.
	^ true] in PluggableTextMorph>>yellowButtonActivity:
MenuMorph(Object)>>ifNotNilDo:
PluggableTextMorph>>yellowButtonActivity:
PluggableTextMorph(ScrollPane)>>mouseDown:
PluggableTextMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
PluggableTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
10 December 2013 11:53:15.274 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

Array(Object)>>errorSubscriptBounds:
	Receiver: #()
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
#()

Array(Object)>>at:
	Receiver: #()
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
#()

Array(SequenceableCollection)>>first
	Receiver: #()
	Arguments and temporary variables: 

	Receiver's instance variables: 
#()

NautilusUI(AbstractTool)>>compileANewMethodInClass:categorized:from:notifyng:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aClass: 	ENombre1
		aCategory: 	#other
		aString: 	''
		aController: 	a PluggableTextMorphWithLimits(148635648)
		selector: 	nil
		existingMethod: 	nil
		targetClass: 	ENombre1
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a Nautilus
		window: 	a NautilusWindow(160694272)
		hierarchyClass: 	EOperateur
		cachedHierarchy: 	an IdentityDictionary(Calculette->an OrderedCollection(' ' Cal...etc...
		sourceTextArea: 	a PluggableTextMorphWithLimits(148635648)
		firstColumn: 	a PanelMorph(20709376)
		secondColumn: 	a PanelMorph(826015744)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a RPackage(IN107)->true )
		classesSelection: 	a Dictionary(ENombre1->true EtatCalculette->false )
		list: 	a PluggableIconListMorph(56885248)
		list2: 	a PluggableIconListMorph(862191616)
		sourceCodePanel: 	a PanelMorph(1052246016)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(887095296)
		list2Elements: 	{Calculette. EtatCalculette. ENombre1. ENombre2. EOperateur}
		listElements: 	an Array(a RPackage(AST-Core) a RPackage(AST-Core-Matching) a RPa...etc...
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(148635648)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(653524992)
		contentSelection: 	nil
		categories: 	nil
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		methods: 	nil


NautilusUI>>compileAMethodFromCategory:withSource:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aCategory: 	#other
		aString: 	''
		aController: 	a PluggableTextMorphWithLimits(148635648)
		category: 	#other
		selector: 	nil
		class: 	ENombre1
		scroll: 	0.0
		method: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a Nautilus
		window: 	a NautilusWindow(160694272)
		hierarchyClass: 	EOperateur
		cachedHierarchy: 	an IdentityDictionary(Calculette->an OrderedCollection(' ' Cal...etc...
		sourceTextArea: 	a PluggableTextMorphWithLimits(148635648)
		firstColumn: 	a PanelMorph(20709376)
		secondColumn: 	a PanelMorph(826015744)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a RPackage(IN107)->true )
		classesSelection: 	a Dictionary(ENombre1->true EtatCalculette->false )
		list: 	a PluggableIconListMorph(56885248)
		list2: 	a PluggableIconListMorph(862191616)
		sourceCodePanel: 	a PanelMorph(1052246016)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(887095296)
		list2Elements: 	{Calculette. EtatCalculette. ENombre1. ENombre2. EOperateur}
		listElements: 	an Array(a RPackage(AST-Core) a RPackage(AST-Core-Matching) a RPa...etc...
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(148635648)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(653524992)
		contentSelection: 	nil
		categories: 	nil
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		methods: 	nil


NautilusUI>>compileSource:notifying:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aText: 	a Text for ''
		aController: 	a PluggableTextMorphWithLimits(148635648)
		source: 	''
		category: 	#other
		method: 	ENombre1>>#for:
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a Nautilus
		window: 	a NautilusWindow(160694272)
		hierarchyClass: 	EOperateur
		cachedHierarchy: 	an IdentityDictionary(Calculette->an OrderedCollection(' ' Cal...etc...
		sourceTextArea: 	a PluggableTextMorphWithLimits(148635648)
		firstColumn: 	a PanelMorph(20709376)
		secondColumn: 	a PanelMorph(826015744)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a RPackage(IN107)->true )
		classesSelection: 	a Dictionary(ENombre1->true EtatCalculette->false )
		list: 	a PluggableIconListMorph(56885248)
		list2: 	a PluggableIconListMorph(862191616)
		sourceCodePanel: 	a PanelMorph(1052246016)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(887095296)
		list2Elements: 	{Calculette. EtatCalculette. ENombre1. ENombre2. EOperateur}
		listElements: 	an Array(a RPackage(AST-Core) a RPackage(AST-Core-Matching) a RPa...etc...
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(148635648)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(653524992)
		contentSelection: 	nil
		categories: 	nil
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		methods: 	nil


[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
	Receiver: a PluggableTextMorphWithLimits(148635648)
	Arguments and temporary variables: 
		acceptedText: 	a Text for ''
	Receiver's instance variables: 
		bounds: 	(87.0@331.0) corner: (903.0@608.0)
		owner: 	a MultipleMethodsEditor(653524992)
		submorphs: 	an Array(an AlphaImageMorph(389545984) a TransformMorph(491257856))
		fullBounds: 	(87@331) corner: (903@608)
		color: 	Color white
		extension: 	a MorphExtension (106168320) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(175636480)
		scroller: 	a TransformMorph(491257856)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884473856)
		textMorph: 	a TextMorphForEditView(133431296)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(389545984)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


BlockClosure>>ensure:
	Receiver: [^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perfo...etc...
	Arguments and temporary variables: 
		aBlock: 	[unstyledAcceptText := nil]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInMod...etc...
		startpc: 	65
		numArgs: 	0


PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
	Receiver: a PluggableTextMorphWithLimits(148635648)
	Arguments and temporary variables: 
		acceptedText: 	a Text for ''
	Receiver's instance variables: 
		bounds: 	(87.0@331.0) corner: (903.0@608.0)
		owner: 	a MultipleMethodsEditor(653524992)
		submorphs: 	an Array(an AlphaImageMorph(389545984) a TransformMorph(491257856))
		fullBounds: 	(87@331) corner: (903@608)
		color: 	Color white
		extension: 	a MorphExtension (106168320) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(175636480)
		scroller: 	a TransformMorph(491257856)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884473856)
		textMorph: 	a TextMorphForEditView(133431296)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(389545984)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptBasic
	Receiver: a PluggableTextMorphWithLimits(148635648)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	(1 to: 0)
		saveScrollerOffset: 	(-3.0@0.0)
	Receiver's instance variables: 
		bounds: 	(87.0@331.0) corner: (903.0@608.0)
		owner: 	a MultipleMethodsEditor(653524992)
		submorphs: 	an Array(an AlphaImageMorph(389545984) a TransformMorph(491257856))
		fullBounds: 	(87@331) corner: (903@608)
		color: 	Color white
		extension: 	a MorphExtension (106168320) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(175636480)
		scroller: 	a TransformMorph(491257856)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884473856)
		textMorph: 	a TextMorphForEditView(133431296)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(389545984)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits>>acceptBasic
	Receiver: a PluggableTextMorphWithLimits(148635648)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	nil
		saveScrollerOffset: 	nil
	Receiver's instance variables: 
		bounds: 	(87.0@331.0) corner: (903.0@608.0)
		owner: 	a MultipleMethodsEditor(653524992)
		submorphs: 	an Array(an AlphaImageMorph(389545984) a TransformMorph(491257856))
		fullBounds: 	(87@331) corner: (903@608)
		color: 	Color white
		extension: 	a MorphExtension (106168320) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(175636480)
		scroller: 	a TransformMorph(491257856)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884473856)
		textMorph: 	a TextMorphForEditView(133431296)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(389545984)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>accept
	Receiver: a PluggableTextMorphWithLimits(148635648)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(87.0@331.0) corner: (903.0@608.0)
		owner: 	a MultipleMethodsEditor(653524992)
		submorphs: 	an Array(an AlphaImageMorph(389545984) a TransformMorph(491257856))
		fullBounds: 	(87@331) corner: (903@608)
		color: 	Color white
		extension: 	a MorphExtension (106168320) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(175636480)
		scroller: 	a TransformMorph(491257856)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884473856)
		textMorph: 	a TextMorphForEditView(133431296)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(389545984)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>promptForCancel
	Receiver: a PluggableTextMorphWithLimits(148635648)
	Arguments and temporary variables: 
		choice: 	true
	Receiver's instance variables: 
		bounds: 	(87.0@331.0) corner: (903.0@608.0)
		owner: 	a MultipleMethodsEditor(653524992)
		submorphs: 	an Array(an AlphaImageMorph(389545984) a TransformMorph(491257856))
		fullBounds: 	(87@331) corner: (903@608)
		color: 	Color white
		extension: 	a MorphExtension (106168320) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(175636480)
		scroller: 	a TransformMorph(491257856)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884473856)
		textMorph: 	a TextMorphForEditView(133431296)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(389545984)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>update:
	Receiver: a PluggableTextMorphWithLimits(148635648)
	Arguments and temporary variables: 
		aSymbol: 	#wantToChange
	Receiver's instance variables: 
		bounds: 	(87.0@331.0) corner: (903.0@608.0)
		owner: 	a MultipleMethodsEditor(653524992)
		submorphs: 	an Array(an AlphaImageMorph(389545984) a TransformMorph(491257856))
		fullBounds: 	(87@331) corner: (903@608)
		color: 	Color white
		extension: 	a MorphExtension (106168320) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a NautilusUI
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(175636480)
		scroller: 	a TransformMorph(491257856)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884473856)
		textMorph: 	a TextMorphForEditView(133431296)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	350
		method: 	nil
		lockIcon: 	an AlphaImageMorph(389545984)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


NautilusUI(AbstractNautilusUI)>>okToChange
	Receiver: a NautilusUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a Nautilus
		window: 	a NautilusWindow(160694272)
		hierarchyClass: 	EOperateur
		cachedHierarchy: 	an IdentityDictionary(Calculette->an OrderedCollection(' ' Cal...etc...
		sourceTextArea: 	a PluggableTextMorphWithLimits(148635648)
		firstColumn: 	a PanelMorph(20709376)
		secondColumn: 	a PanelMorph(826015744)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a RPackage(IN107)->true )
		classesSelection: 	a Dictionary(ENombre1->true EtatCalculette->false )
		list: 	a PluggableIconListMorph(56885248)
		list2: 	a PluggableIconListMorph(862191616)
		sourceCodePanel: 	a PanelMorph(1052246016)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(887095296)
		list2Elements: 	{Calculette. EtatCalculette. ENombre1. ENombre2. EOperateur}
		listElements: 	an Array(a RPackage(AST-Core) a RPackage(AST-Core-Matching) a RPa...etc...
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(148635648)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(653524992)
		contentSelection: 	nil
		categories: 	nil
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		methods: 	nil


NautilusUI>>removeMethod:inClass:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aMethod: 	ENombre1>>#for:
		aClass: 	ENombre1
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a Nautilus
		window: 	a NautilusWindow(160694272)
		hierarchyClass: 	EOperateur
		cachedHierarchy: 	an IdentityDictionary(Calculette->an OrderedCollection(' ' Cal...etc...
		sourceTextArea: 	a PluggableTextMorphWithLimits(148635648)
		firstColumn: 	a PanelMorph(20709376)
		secondColumn: 	a PanelMorph(826015744)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a RPackage(IN107)->true )
		classesSelection: 	a Dictionary(ENombre1->true EtatCalculette->false )
		list: 	a PluggableIconListMorph(56885248)
		list2: 	a PluggableIconListMorph(862191616)
		sourceCodePanel: 	a PanelMorph(1052246016)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(887095296)
		list2Elements: 	{Calculette. EtatCalculette. ENombre1. ENombre2. EOperateur}
		listElements: 	an Array(a RPackage(AST-Core) a RPackage(AST-Core-Matching) a RPa...etc...
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(148635648)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(653524992)
		contentSelection: 	nil
		categories: 	nil
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		methods: 	nil


NautilusUI(AbstractTool)>>removeMethods:inClass:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aCollection: 	{ENombre1>>#for:}
		aClass: 	ENombre1
		messagesName: 	nil
		confirmation: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a Nautilus
		window: 	a NautilusWindow(160694272)
		hierarchyClass: 	EOperateur
		cachedHierarchy: 	an IdentityDictionary(Calculette->an OrderedCollection(' ' Cal...etc...
		sourceTextArea: 	a PluggableTextMorphWithLimits(148635648)
		firstColumn: 	a PanelMorph(20709376)
		secondColumn: 	a PanelMorph(826015744)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a RPackage(IN107)->true )
		classesSelection: 	a Dictionary(ENombre1->true EtatCalculette->false )
		list: 	a PluggableIconListMorph(56885248)
		list2: 	a PluggableIconListMorph(862191616)
		sourceCodePanel: 	a PanelMorph(1052246016)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(887095296)
		list2Elements: 	{Calculette. EtatCalculette. ENombre1. ENombre2. EOperateur}
		listElements: 	an Array(a RPackage(AST-Core) a RPackage(AST-Core-Matching) a RPa...etc...
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(148635648)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(653524992)
		contentSelection: 	nil
		categories: 	nil
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		methods: 	nil


[:items | 
| scroll needToUpdate selectedMethodStillExists |
scroll := methodWidget vScrollValue.
	needToUpdate := self removeMethods: items inClass: class.
	needToUpdate
		ifTrue: [self resetMethodsListSelection.
			methodWidget updateList].
	(class methodDict values includes: self selectedMethod)
		ifFalse: [self selectedMethod: nil].
	self resetMethodsListSelection.
	methodWidget updateList; vScrollValue: scroll] in NautilusUI>>removeMethods
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		class: 	ENombre1
		items: 	{ENombre1>>#for:}
		scroll: 	0.0
		needToUpdate: 	nil
		selectedMethodStillExists: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a Nautilus
		window: 	a NautilusWindow(160694272)
		hierarchyClass: 	EOperateur
		cachedHierarchy: 	an IdentityDictionary(Calculette->an OrderedCollection(' ' Cal...etc...
		sourceTextArea: 	a PluggableTextMorphWithLimits(148635648)
		firstColumn: 	a PanelMorph(20709376)
		secondColumn: 	a PanelMorph(826015744)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a RPackage(IN107)->true )
		classesSelection: 	a Dictionary(ENombre1->true EtatCalculette->false )
		list: 	a PluggableIconListMorph(56885248)
		list2: 	a PluggableIconListMorph(862191616)
		sourceCodePanel: 	a PanelMorph(1052246016)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(887095296)
		list2Elements: 	{Calculette. EtatCalculette. ENombre1. ENombre2. EOperateur}
		listElements: 	an Array(a RPackage(AST-Core) a RPackage(AST-Core-Matching) a RPa...etc...
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(148635648)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(653524992)
		contentSelection: 	nil
		categories: 	nil
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		methods: 	nil


BlockClosure>>cull:
	Receiver: [:items | 
| scroll needToUpdate selectedMethodStillExists |
scroll := methodWidget vScrol...etc...
	Arguments and temporary variables: 
		anArg: 	{ENombre1>>#for:}
	Receiver's instance variables: 
		outerContext: 	NautilusUI>>removeMethods
		startpc: 	92
		numArgs: 	1


Array(Collection)>>ifNotEmpty:
	Receiver: {ENombre1>>#for:}
	Arguments and temporary variables: 
		aBlock: 	[:items | 
| scroll needToUpdate selectedMethodStillExists |
scroll := ...etc...
	Receiver's instance variables: 
{ENombre1>>#for:}

NautilusUI>>removeMethods
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		class: 	ENombre1
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a NautilusWindow(...etc...
		model: 	a Nautilus
		window: 	a NautilusWindow(160694272)
		hierarchyClass: 	EOperateur
		cachedHierarchy: 	an IdentityDictionary(Calculette->an OrderedCollection(' ' Cal...etc...
		sourceTextArea: 	a PluggableTextMorphWithLimits(148635648)
		firstColumn: 	a PanelMorph(20709376)
		secondColumn: 	a PanelMorph(826015744)
		groupsSelection: 	a Dictionary()
		packagesSelection: 	a Dictionary(a RPackage(IN107)->true )
		classesSelection: 	a Dictionary(ENombre1->true EtatCalculette->false )
		list: 	a PluggableIconListMorph(56885248)
		list2: 	a PluggableIconListMorph(862191616)
		sourceCodePanel: 	a PanelMorph(1052246016)
		commentTextArea: 	nil
		currentDisplayChoice: 	#SourceCode
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(887095296)
		list2Elements: 	{Calculette. EtatCalculette. ENombre1. ENombre2. EOperateur}
		listElements: 	an Array(a RPackage(AST-Core) a RPackage(AST-Core-Matching) a RPa...etc...
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(148635648)...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(653524992)
		contentSelection: 	nil
		categories: 	nil
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		methods: 	nil


[target removeMethods] in MethodWidget class>>elementsMenu:
	Receiver: MethodWidget
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		selectedMethods: 	nil
		selectedMethod: 	nil
		tmp: 	nil
		target: 	a NautilusUI
	Receiver's instance variables: 
		superclass: 	AbstractMethodWidget
		methodDict: 	a MethodDictionary(#buildMethodsList->MethodWidget>>#buildMethodsLi...etc...
		format: 	142
		layout: 	nil
		instanceVariables: 	#('methodsList' 'methodsSelection' 'methods')
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#MethodWidget
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Nautilus-Widgets'
		traitComposition: 	nil
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [target removeMethods]
	Arguments and temporary variables: 
		anArg: 	a NautilusUI
	Receiver's instance variables: 
		outerContext: 	MethodWidget class>>elementsMenu:
		startpc: 	992
		numArgs: 	0


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(108003328)'Remove...'
	Arguments and temporary variables: 
		evt: 	[(709@273) mouseUp 4292219 nil]
		w: 	a PasteUpMorph(425197568) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(594.0@266.0) corner: (784.0@284.0)
		owner: 	a MenuMorph(229900288)
		submorphs: 	#()
		fullBounds: 	(594.0@266.0) corner: (784.0@284.0)
		color: 	Color black
		extension: 	a MorphExtension (130285568) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Remove...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[target removeMethods]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'x'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(108003328)'Remove...'
	Arguments and temporary variables: 
		evt: 	[(709@273) mouseUp 4292219 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(594.0@266.0) corner: (784.0@284.0)
		owner: 	a MenuMorph(229900288)
		submorphs: 	#()
		fullBounds: 	(594.0@266.0) corner: (784.0@284.0)
		color: 	Color black
		extension: 	a MorphExtension (130285568) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Remove...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[target removeMethods]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'x'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(108003328)'Remove...'
	Arguments and temporary variables: 
		evt: 	[(709@273) mouseUp 4292219 nil]
	Receiver's instance variables: 
		bounds: 	(594.0@266.0) corner: (784.0@284.0)
		owner: 	a MenuMorph(229900288)
		submorphs: 	#()
		fullBounds: 	(594.0@266.0) corner: (784.0@284.0)
		color: 	Color black
		extension: 	a MorphExtension (130285568) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Remove...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[target removeMethods]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'x'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(108003328)'Remove...'
	Arguments and temporary variables: 
		anEvent: 	[(709@273) mouseUp 4292219 nil]
	Receiver's instance variables: 
		bounds: 	(594.0@266.0) corner: (784.0@284.0)
		owner: 	a MenuMorph(229900288)
		submorphs: 	#()
		fullBounds: 	(594.0@266.0) corner: (784.0@284.0)
		color: 	Color black
		extension: 	a MorphExtension (130285568) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Remove...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[target removeMethods]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'x'


MouseButtonEvent>>sentTo:
	Receiver: [(709@273) mouseUp 4292219 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(108003328)'Remove...'
	Receiver's instance variables: 
		timeStamp: 	4292219
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(709@273)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(108003328)'Remove...'
	Arguments and temporary variables: 
		anEvent: 	[(709@273) mouseUp 4292219 nil]
	Receiver's instance variables: 
		bounds: 	(594.0@266.0) corner: (784.0@284.0)
		owner: 	a MenuMorph(229900288)
		submorphs: 	#()
		fullBounds: 	(594.0@266.0) corner: (784.0@284.0)
		color: 	Color black
		extension: 	a MorphExtension (130285568) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Remove...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[target removeMethods]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'x'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(709@273) mouseUp 4292219 nil]
		aMorph: 	a ToggleMenuItemMorph(108003328)'Remove...'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(709@273) mouseUp 4292219 nil]
		aMorph: 	a ToggleMenuItemMorph(108003328)'Remove...'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(108003328)'Remove...'
	Arguments and temporary variables: 
		anEvent: 	[(709@273) mouseUp 4292219 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(594.0@266.0) corner: (784.0@284.0)
		owner: 	a MenuMorph(229900288)
		submorphs: 	#()
		fullBounds: 	(594.0@266.0) corner: (784.0@284.0)
		color: 	Color black
		extension: 	a MorphExtension (130285568) [other:  (announcer -> an Announcer)]
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Remove...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[target removeMethods]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'x'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(709@273) mouseUp 4292219 nil]
		aMorph: 	a MenuMorph(229900288)
		localEvt: 	[(709@273) mouseUp 4292219 nil]
		index: 	17
		child: 	a ToggleMenuItemMorph(108003328)'Remove...'
		morphs: 	an Array(a ToggleMenuItemMorph(322699264)'Refactoring' a ToggleMenuItem...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(709@273) mouseUp 4292219 nil]
		aMorph: 	a MenuMorph(229900288)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(229900288)
	Arguments and temporary variables: 
		anEvent: 	[(709@273) mouseUp 4292219 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(589.0@57.0) corner: (789.0@337.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(322699264)'Refactoring' a ToggleMenuI...etc...
		fullBounds: 	(589.0@57.0) corner: (789.0@337.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1035993088) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(108003328)'Remove...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(229900288)
	Arguments and temporary variables: 
		anEvent: 	[(709@273) mouseUp 4292219 nil]
	Receiver's instance variables: 
		bounds: 	(589.0@57.0) corner: (789.0@337.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(322699264)'Refactoring' a ToggleMenuI...etc...
		fullBounds: 	(589.0@57.0) corner: (789.0@337.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1035993088) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(108003328)'Remove...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(229900288)
	Arguments and temporary variables: 
		evt: 	[(709@273) mouseUp 4292219 nil]
	Receiver's instance variables: 
		bounds: 	(589.0@57.0) corner: (789.0@337.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(322699264)'Refactoring' a ToggleMenuI...etc...
		fullBounds: 	(589.0@57.0) corner: (789.0@337.0)
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (1035993088) [other:  (basicColor -> (Color r: 0.74...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(108003328)'Remove...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	nil



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
Array(SequenceableCollection)>>first
NautilusUI(AbstractTool)>>compileANewMethodInClass:categorized:from:notifyng:
NautilusUI>>compileAMethodFromCategory:withSource:notifying:
NautilusUI>>compileSource:notifying:
[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
BlockClosure>>ensure:
PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptBasic
PluggableTextMorphWithLimits>>acceptBasic
PluggableTextMorphWithLimits(PluggableTextMorph)>>accept
PluggableTextMorphWithLimits(PluggableTextMorph)>>promptForCancel
PluggableTextMorphWithLimits(PluggableTextMorph)>>update:
NautilusUI(AbstractNautilusUI)>>okToChange
NautilusUI>>removeMethod:inClass:
NautilusUI(AbstractTool)>>removeMethods:inClass:
[:items | 
| scroll needToUpdate selectedMethodStillExists |
scroll := methodWidget vScrollValue.
	needToUpdate := self removeMethods: items inClass: class.
	needToUpdate
		ifTrue: [self resetMethodsListSelection.
			methodWidget updateList].
	(class methodDict values includes: self selectedMethod)
		ifFalse: [self selectedMethod: nil].
	self resetMethodsListSelection.
	methodWidget updateList; vScrollValue: scroll] in NautilusUI>>removeMethods
BlockClosure>>cull:
Array(Collection)>>ifNotEmpty:
NautilusUI>>removeMethods
[target removeMethods] in MethodWidget class>>elementsMenu:
BlockClosure>>cull:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>2
10 December 2013 11:58:49.154 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

SmallInteger(Object)>>doesNotUnderstand: 2
	Receiver: 2
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
2

ENombre2>>enter:
	Receiver: an ENombre2
	Arguments and temporary variables: 
		s: 	1
		tmp: 	nil
	Receiver's instance variables: 
		calc: 	a Calculette


Calculette>>enter:
	Receiver: a Calculette
	Arguments and temporary variables: 
		s: 	1
	Receiver's instance variables: 
		etats: 	an Array(an ENombre1 an EOperateur an ENombre2)
		etatCourant: 	an ENombre2
		accumulateur: 	2
		operateur: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(175636480)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C enter: 1
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(175636480)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(36 to: 35)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(36 to: 35)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(36 to: 35)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(36 to: 35)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
		thirdArg: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOfIt]
 #sendersOfIt on ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	11
		each: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOf...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(752615424)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-i>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(175636480)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(175636480)
	Receiver's instance variables: 
		timeStamp: 	4628121
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(106.0@47.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	9
		charCode: 	105
		scanCode: 	9


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		focusHolder: 	a TextMorphForEditView(175636480)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(125@440) corner: (141@456)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(125@440) corner: (141@456)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(175636480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(133@449) mouseOver nil nil]
		targetOffset: 	(101.0@39.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4627403 133 449 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (973@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(210239488) a Syste...etc...
		fullBounds: 	(0@0) corner: (973@662)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: 2
ENombre2>>enter:
Calculette>>enter:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ENombre1 class>>for:
10 December 2013 11:59:18.438 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

ENombre1 class(Object)>>doesNotUnderstand: #for:
	Receiver: ENombre1
	Arguments and temporary variables: 
		aMessage: 	for: a Calculette
		exception: 	MessageNotUnderstood: ENombre1 class>>for:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	EtatCalculette
		methodDict: 	a MethodDictionary(#enter:->ENombre1>>#enter: )
		format: 	132
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#ENombre1
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#IN107
		traitComposition: 	{}
		localSelectors: 	nil


Calculette>>initialize
	Receiver: a Calculette
	Arguments and temporary variables: 

	Receiver's instance variables: 
		etats: 	nil
		etatCourant: 	nil
		accumulateur: 	nil
		operateur: 	nil


Calculette class(Behavior)>>new
	Receiver: Calculette
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#accumulateur->Calculette>>#accumulateur #accumu...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	#('etats' 'etatCourant' 'accumulateur' 'operateur')
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#Calculette
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#IN107
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(175636480)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C := Calculette new
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(175636480)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(21 to: 20)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(21 to: 20)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(21 to: 20)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(21 to: 20)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph doIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	141
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	141
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
		thirdArg: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	141
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Ctrl + D do [:morph | morph doIt]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Ctrl + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#doIt on Ctrl + D do [:morph | morph doIt]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOfIt]
 #sendersOfIt on ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	8
		each: 	#doIt on Ctrl + D do [:morph | morph doIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOf...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(752615424)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-d>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(175636480)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(175636480)
	Receiver's instance variables: 
		timeStamp: 	4657401
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(159.0@10.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	4
		charCode: 	100
		scanCode: 	4


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		focusHolder: 	a TextMorphForEditView(175636480)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(186@412) corner: (202@428)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(186@412) corner: (202@428)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(175636480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(186@412) mouseOver nil nil]
		targetOffset: 	(163.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4656307 186 412 0 0 0 1)
		lastKeyScanCode: 	4
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	2


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (973@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(210239488) a Syste...etc...
		fullBounds: 	(0@0) corner: (973@662)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
ENombre1 class(Object)>>doesNotUnderstand: #for:
Calculette>>initialize
Calculette class(Behavior)>>new
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[:morph | morph doIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>2
10 December 2013 11:59:48.484 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

SmallInteger(Object)>>doesNotUnderstand: 2
	Receiver: 2
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
2

ENombre2>>enter:
	Receiver: an ENombre2
	Arguments and temporary variables: 
		s: 	'plus'
		tmp: 	nil
	Receiver's instance variables: 
		calc: 	a Calculette


Calculette>>enter:
	Receiver: a Calculette
	Arguments and temporary variables: 
		s: 	'plus'
	Receiver's instance variables: 
		etats: 	an Array(an ENombre1 an EOperateur an ENombre2)
		etatCourant: 	an ENombre2
		accumulateur: 	2
		operateur: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(175636480)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C enter: 'plus'
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(175636480)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(40 to: 39)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(40 to: 39)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(40 to: 39)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(40 to: 39)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph doIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	141
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	141
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
		thirdArg: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	141
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Ctrl + D do [:morph | morph doIt]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Ctrl + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#doIt on Ctrl + D do [:morph | morph doIt]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOfIt]
 #sendersOfIt on ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	8
		each: 	#doIt on Ctrl + D do [:morph | morph doIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOf...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(752615424)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-d>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(175636480)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(175636480)
	Receiver's instance variables: 
		timeStamp: 	4687433
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(111.0@65.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	4
		charCode: 	100
		scanCode: 	4


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		focusHolder: 	a TextMorphForEditView(175636480)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(130@458) corner: (146@474)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(130@458) corner: (146@474)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(175636480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(138@467) mouseOver nil nil]
		targetOffset: 	(27.0@62.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4686955 138 467 0 0 0 1)
		lastKeyScanCode: 	4
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (973@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(210239488) a Nauti...etc...
		fullBounds: 	(0@0) corner: (973@662)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: 2
ENombre2>>enter:
Calculette>>enter:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[:morph | morph doIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>2
10 December 2013 12:02:55.182 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

SmallInteger(Object)>>doesNotUnderstand: 2
	Receiver: 2
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
2

ENombre2>>enter:
	Receiver: an ENombre2
	Arguments and temporary variables: 
		s: 	2
		tmp: 	nil
	Receiver's instance variables: 
		calc: 	a Calculette


Calculette>>enter:
	Receiver: a Calculette
	Arguments and temporary variables: 
		s: 	2
	Receiver's instance variables: 
		etats: 	an Array(an ENombre1 an EOperateur an ENombre2)
		etatCourant: 	an ENombre2
		accumulateur: 	2
		operateur: 	2


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(175636480)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C enter: 2
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(175636480)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 64)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 64)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 64)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 64)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph doIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	141
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	141
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
		thirdArg: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	141
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Ctrl + D do [:morph | morph doIt]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Ctrl + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Ctrl + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Ctrl + D
		defaultShortcut: 	Ctrl + D
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#doIt on Ctrl + D do [:morph | morph doIt]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOfIt]
 #sendersOfIt on ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	8
		each: 	#doIt on Ctrl + D do [:morph | morph doIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOf...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(752615424)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-d>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(175636480)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(175636480)
	Receiver's instance variables: 
		timeStamp: 	4874137
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(202.0@65.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	4
		charCode: 	100
		scanCode: 	4


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-d>']
		focusHolder: 	a TextMorphForEditView(175636480)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(221@458) corner: (237@474)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(221@458) corner: (237@474)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(175636480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(229@467) mouseOver nil nil]
		targetOffset: 	(206.0@66.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4873109 229 467 0 0 0 1)
		lastKeyScanCode: 	4
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	2


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (973@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(210239488) a Syste...etc...
		fullBounds: 	(0@0) corner: (973@662)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: 2
ENombre2>>enter:
Calculette>>enter:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[:morph | morph doIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>plus
10 December 2013 12:03:37 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

SmallInteger(Object)>>doesNotUnderstand: 'plus'
	Receiver: 1
	Arguments and temporary variables: 
		aMessage: 	plus 2
		exception: 	MessageNotUnderstood: SmallInteger>>plus
		resumeValue: 	nil
	Receiver's instance variables: 
1

ENombre2>>enter:
	Receiver: an ENombre2
	Arguments and temporary variables: 
		s: 	2
		tmp: 	nil
	Receiver's instance variables: 
		calc: 	a Calculette


Calculette>>enter:
	Receiver: a Calculette
	Arguments and temporary variables: 
		s: 	2
	Receiver's instance variables: 
		etats: 	an Array(an ENombre1 an EOperateur an ENombre2)
		etatCourant: 	an ENombre2
		accumulateur: 	1
		operateur: 	'plus'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(175636480)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C enter: 2
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(175636480)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 64)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 64)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 64)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 64)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
		thirdArg: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOfIt]
 #sendersOfIt on ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	11
		each: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOf...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(752615424)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-i>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(175636480)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(175636480)
	Receiver's instance variables: 
		timeStamp: 	4915673
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(78.0@75.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	9
		charCode: 	105
		scanCode: 	9


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		focusHolder: 	a TextMorphForEditView(175636480)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(105@477) corner: (121@493)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(105@477) corner: (121@493)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(175636480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(105@477) mouseOver nil nil]
		targetOffset: 	(83.0@76.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4915173 105 477 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (973@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(210239488) a Syste...etc...
		fullBounds: 	(0@0) corner: (973@662)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: 'plus'
ENombre2>>enter:
Calculette>>enter:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>plus
10 December 2013 12:03:50.796 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

SmallInteger(Object)>>doesNotUnderstand: 'plus'
	Receiver: 1
	Arguments and temporary variables: 
		aMessage: 	plus 'plus'
		exception: 	MessageNotUnderstood: SmallInteger>>plus
		resumeValue: 	nil
	Receiver's instance variables: 
1

ENombre2>>enter:
	Receiver: an ENombre2
	Arguments and temporary variables: 
		s: 	'plus'
		tmp: 	nil
	Receiver's instance variables: 
		calc: 	a Calculette


Calculette>>enter:
	Receiver: a Calculette
	Arguments and temporary variables: 
		s: 	'plus'
	Receiver's instance variables: 
		etats: 	an Array(an ENombre1 an EOperateur an ENombre2)
		etatCourant: 	an ENombre2
		accumulateur: 	1
		operateur: 	'plus'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(175636480)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C enter: 'plus'
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(175636480)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(53 to: 52)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(53 to: 52)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(53 to: 52)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(53 to: 52)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
		thirdArg: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOfIt]
 #sendersOfIt on ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	11
		each: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOf...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(752615424)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-i>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(175636480)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(175636480)
	Receiver's instance variables: 
		timeStamp: 	4929753
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(146.0@69.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	9
		charCode: 	105
		scanCode: 	9


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		focusHolder: 	a TextMorphForEditView(175636480)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(173@471) corner: (189@487)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(173@471) corner: (189@487)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(175636480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(173@471) mouseOver nil nil]
		targetOffset: 	(93.0@56.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4929211 173 471 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (973@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(210239488) a Syste...etc...
		fullBounds: 	(0@0) corner: (973@662)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: 'plus'
ENombre2>>enter:
Calculette>>enter:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>plus
10 December 2013 12:03:53.776 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

SmallInteger(Object)>>doesNotUnderstand: 'plus'
	Receiver: 1
	Arguments and temporary variables: 
		aMessage: 	plus 'plus'
		exception: 	MessageNotUnderstood: SmallInteger>>plus
		resumeValue: 	nil
	Receiver's instance variables: 
1

ENombre2>>enter:
	Receiver: an ENombre2
	Arguments and temporary variables: 
		s: 	'plus'
		tmp: 	nil
	Receiver's instance variables: 
		calc: 	a Calculette


Calculette>>enter:
	Receiver: a Calculette
	Arguments and temporary variables: 
		s: 	'plus'
	Receiver's instance variables: 
		etats: 	an Array(an ENombre1 an EOperateur an ENombre2)
		etatCourant: 	an ENombre2
		accumulateur: 	1
		operateur: 	'plus'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(175636480)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C enter: 'plus'
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(175636480)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(37 to: 52)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(37 to: 52)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(37 to: 52)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(37 to: 52)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
		thirdArg: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOfIt]
 #sendersOfIt on ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	11
		each: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOf...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(752615424)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-i>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(175636480)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(175636480)
	Receiver's instance variables: 
		timeStamp: 	4932729
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(144.0@42.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	9
		charCode: 	105
		scanCode: 	9


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		focusHolder: 	a TextMorphForEditView(175636480)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(171@444) corner: (187@460)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(171@444) corner: (187@460)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(175636480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(171@444) mouseOver nil nil]
		targetOffset: 	(8.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4932195 171 444 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	2


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (973@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(210239488) a Syste...etc...
		fullBounds: 	(0@0) corner: (973@662)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: 'plus'
ENombre2>>enter:
Calculette>>enter:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>plus
10 December 2013 12:03:59.166 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

SmallInteger(Object)>>doesNotUnderstand: 'plus'
	Receiver: 1
	Arguments and temporary variables: 
		aMessage: 	plus 'plus'
		exception: 	MessageNotUnderstood: SmallInteger>>plus
		resumeValue: 	nil
	Receiver's instance variables: 
1

ENombre2>>enter:
	Receiver: an ENombre2
	Arguments and temporary variables: 
		s: 	'plus'
		tmp: 	nil
	Receiver's instance variables: 
		calc: 	a Calculette


Calculette>>enter:
	Receiver: a Calculette
	Arguments and temporary variables: 
		s: 	'plus'
	Receiver's instance variables: 
		etats: 	an Array(an ENombre1 an EOperateur an ENombre2)
		etatCourant: 	an ENombre2
		accumulateur: 	1
		operateur: 	'plus'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(175636480)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C enter: 'plus'
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(175636480)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(53 to: 52)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(53 to: 52)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(53 to: 52)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(53 to: 52)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
		thirdArg: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOfIt]
 #sendersOfIt on ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	11
		each: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOf...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(752615424)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-i>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(175636480)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(175636480)
	Receiver's instance variables: 
		timeStamp: 	4938121
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(101.0@59.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	9
		charCode: 	105
		scanCode: 	9


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		focusHolder: 	a TextMorphForEditView(175636480)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(128@461) corner: (144@477)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(128@461) corner: (144@477)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(175636480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(128@461) mouseOver nil nil]
		targetOffset: 	(105.0@60.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4937421 128 461 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	2


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (973@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(210239488) a Syste...etc...
		fullBounds: 	(0@0) corner: (973@662)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: 'plus'
ENombre2>>enter:
Calculette>>enter:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>plus
10 December 2013 12:04:09.764 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

SmallInteger(Object)>>doesNotUnderstand: 'plus'
	Receiver: 1
	Arguments and temporary variables: 
		aMessage: 	plus 1
		exception: 	MessageNotUnderstood: SmallInteger>>plus
		resumeValue: 	nil
	Receiver's instance variables: 
1

ENombre2>>enter:
	Receiver: an ENombre2
	Arguments and temporary variables: 
		s: 	1
		tmp: 	nil
	Receiver's instance variables: 
		calc: 	a Calculette


Calculette>>enter:
	Receiver: a Calculette
	Arguments and temporary variables: 
		s: 	1
	Receiver's instance variables: 
		etats: 	an Array(an ENombre1 an EOperateur an ENombre2)
		etatCourant: 	an ENombre2
		accumulateur: 	1
		operateur: 	'plus'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(175636480)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C enter: 1
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(175636480)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(36 to: 35)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(36 to: 35)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(36 to: 35)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(36 to: 35)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
		thirdArg: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOfIt]
 #sendersOfIt on ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	11
		each: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOf...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(752615424)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-i>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(175636480)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(175636480)
	Receiver's instance variables: 
		timeStamp: 	4948729
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(93.0@39.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	9
		charCode: 	105
		scanCode: 	9


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		focusHolder: 	a TextMorphForEditView(175636480)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(120@441) corner: (136@457)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(120@441) corner: (136@457)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(175636480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(120@441) mouseOver nil nil]
		targetOffset: 	(95.0@41.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4948213 119 442 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (973@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(210239488) a Syste...etc...
		fullBounds: 	(0@0) corner: (973@662)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: 'plus'
ENombre2>>enter:
Calculette>>enter:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: SmallInteger>>plus
10 December 2013 12:04:59.174 pm

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
NBCogit NativeBoost-CogPlugin-EstebanLorenzano.18 uuid: a53445f9-c0c0-4015-97a3-be7db8d9ed6b Mar 13 2013
git://gitorious.org/cogvm/blessed.git Commit: 412abef33cbed05cf1d75329e451d71c0c6aa5a7 Date: 2013-03-13 17:48:50 +0100 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14535

Image: Pharo2.0 [Latest update: #20628]

SmallInteger(Object)>>doesNotUnderstand: 'plus'
	Receiver: 1
	Arguments and temporary variables: 
		aMessage: 	plus 2
		exception: 	MessageNotUnderstood: SmallInteger>>plus
		resumeValue: 	nil
	Receiver's instance variables: 
1

ENombre2>>enter:
	Receiver: an ENombre2
	Arguments and temporary variables: 
		s: 	2
		tmp: 	nil
	Receiver's instance variables: 
		calc: 	a Calculette


Calculette>>enter:
	Receiver: a Calculette
	Arguments and temporary variables: 
		s: 	2
	Receiver's instance variables: 
		etats: 	an Array(an ENombre1 an EOperateur an ENombre2)
		etatCourant: 	an ENombre2
		accumulateur: 	1
		operateur: 	'plus'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(175636480)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ C enter: 2
		method: 	UndefinedObject>>#DoIt
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(175636480)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(175636480)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 64)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 64)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 64)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(752615424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(23.0@401.0) corner: (463.0@568.0)
		owner: 	a SystemWindow(210239488)
		submorphs: 	an Array(a TransformMorph(125042688))
		fullBounds: 	(23@401) corner: (463@568)
		color: 	Color white
		extension: 	a MorphExtension (154402816) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.7000000000000001 g: 0.675 b: 0.637)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(777781248)
		scroller: 	a TransformMorph(125042688)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(494141440)
		textMorph: 	a TextMorphForEditView(175636480)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(65 to: 64)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: SmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		morph: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		superclass: 	TextEditor
		methodDict: 	a MethodDictionary(#argAdvance:->SmalltalkEditor>>#argAdvance: #bro...etc...
		format: 	138
		layout: 	nil
		instanceVariables: 	nil
		organization: 	a ClassOrganizer
		subclasses: 	nil
		name: 	#SmalltalkEditor
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Text-Edition'
		traitComposition: 	{}
		localSelectors: 	nil
		cmdActions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop...etc...
		shiftCmdActions: 	#(#noop: #argAdvance: #noop: #compareToClipboard: #debugIt: #m...etc...


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(752615424)
		secondArg: 	a PluggableTextMorph(752615424)
		thirdArg: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
		startpc: 	166
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		l: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		listeners: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Ctrl + I
		defaultShortcut: 	Ctrl + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
		entry: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


Set>>do:
	Receiver: a Set(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOfIt]
 #sendersOfIt on ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	11
		each: 	#inspectIt on Ctrl + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#implementorsOfIt on Ctrl + M do [:morph | morph implementorsOf...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#SmalltalkEditor) a KMDispatcher)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #Unix->a KMStorage #Windows->a KMS...etc...


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#SmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(752615424)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(752615424)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
		aTarget: 	aKMCategoryTarget(#SmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCategoryTarg...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#TextEditor) aKMCatego...etc...
		firstIndex: 	1
		lastIndex: 	8


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#TextEditor) aKMCategoryTarget(#TextMorphTab) ...etc...
		morph: 	a PluggableTextMorph(752615424)
		directKeymaps: 	a KMCategory


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection()
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a PluggableTextMorph(752615424)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-i>']
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation))
		morph: 	a TextMorphForEditView(175636480)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Ctrl-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(175636480)
	Receiver's instance variables: 
		timeStamp: 	4998137
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	16
		position: 	(82.0@75.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	9
		charCode: 	105
		scanCode: 	9


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(175636480)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@114)
		owner: 	a TransformMorph(125042688)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@114)
		color: 	Color black
		extension: 	a MorphExtension (208404480) [locked]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'C := Calculette new.
C
C enter: 1. 
C enter: ''plus''.
C ente...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(752615424)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Ctrl-i>']
		focusHolder: 	a TextMorphForEditView(175636480)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(109@477) corner: (125@493)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(109@477) corner: (125@493)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(175636480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(109@477) mouseOver nil nil]
		targetOffset: 	(86.0@76.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4995325 109 477 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (973@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(210239488) a Syste...etc...
		fullBounds: 	(0@0) corner: (973@662)
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: 'plus'
ENombre2>>enter:
Calculette>>enter:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in SmalltalkEditor class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
OrderedCollection>>do:
KMDispatcher>>dispatch:
KMTarget>>dispatch:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

